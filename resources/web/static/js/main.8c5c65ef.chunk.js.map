{"version":3,"sources":["statistics-total/index.tsx","search-bar/index.tsx","delete-modal/index.tsx","upload-modal/index.tsx","torrents-list/torrent/index.tsx","torrents-list/index.tsx","static/header.jpg","static/logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Statistics","downloading","finished","total","Statistic","Group","widths","Value","Label","torrentTypes","text","value","icon","initialState","loading","results","queryReducer","state","action","type","query","selection","resultRenderer","item","result","ItemGroup","Item","Image","size","src","image","Content","Header","title","Meta","tagline","Description","description","mediatype","Extra","rating","genre","join","date","toString","year","getSearchType","torrentType","querySearchResults","url","dispatch","a","fetch","response","json","items","filter","i","undefined","info","map","art","thumb","key","code","plotoutline","label","path","totalDownloadRate","totalUploadRate","useState","setTorrentType","searcRef","useRef","useReducer","debounceSearchChange","useDebouncedCallback","searchType","handleQueryChange","trim","length","handleResultSelect","data","replace","includes","current","open","Grid","padded","stackable","columns","Row","Column","width","mobile","computer","Dropdown","fluid","options","defaultValue","onChange","_","torrentTypeValue","Search","placeholder","onSearchChange","onResultSelect","ref","minCharacters","Icon","name","toFixed","DeleteTorrentModal","torrentIdsToDelete","setOpen","deleteFiles","setDeleteFiles","hasSelectedTorrents","Modal","onClose","trigger","Popup","Button","content","disabled","onClick","_data","closeOnTriggerClick","inverted","Message","negative","Checkbox","e","checked","Actions","color","id","UploadTorrentModal","React","uri","setUri","file","setFile","addTorrent","additionalData","formData","FormData","append","forEach","x","method","body","onOpen","labelPosition","floated","primary","Form","Input","target","accept","files","TorrentListItem","torrent","onTorrentSelected","isActive","status","statusLabelColor","onResumePause","_event","onPlay","Table","Cell","collapsing","textAlign","toggle","is_selected","progress","Progress","percent","autoSuccess","StatisticGroup","ratio","seeding_time","time_ratio","StatisticValue","download_rate","upload_rate","seeders","seeders_total","peers","peers_total","TorrentList","torrents","selectedTorrents","setSelectedTorrents","torrentList","t","torrentId","isChecked","compact","className","HeaderCell","every","Body","Footer","fullWidth","colSpan","App","setTorrents","useEffect","getList","torrentsList","setInterval","style","backgroundImage","header","backgroundSize","backgroundPosition","height","padding","href","logo","alt","reduce","rate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c5c65ef.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Statistic } from 'semantic-ui-react';\n\ninterface StatisticsProps {\n  downloading: number,\n  finished: number,\n  total: number,\n}\n\nconst Statistics: FC<StatisticsProps> = ({ downloading, finished, total }: StatisticsProps) => (\n  <>\n    <Statistic.Group widths=\"3\">\n      <Statistic>\n        <Statistic.Value>{downloading}</Statistic.Value>\n        <Statistic.Label>Downloading</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{finished}</Statistic.Value>\n        <Statistic.Label>Finished</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{total}</Statistic.Value>\n        <Statistic.Label>Total</Statistic.Label>\n      </Statistic>\n    </Statistic.Group>\n  </>\n);\n\nexport default Statistics;\n","import React, {\n  FC, useReducer, useRef, useState,\n} from 'react';\nimport {\n  Dropdown, DropdownItemProps, Grid, Icon, Item, ItemGroup, Search, SearchResultProps, Statistic,\n} from 'semantic-ui-react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst debounceWaitTime = 300;\n\ntype TorrentType = 'Movies' | 'TvShows' | 'General';\nconst torrentTypes: DropdownItemProps[] = [\n  {\n    text: 'Movies',\n    value: 'Movies',\n    icon: 'film',\n  },\n  {\n    text: 'TV Shows',\n    value: 'TvShows',\n    icon: 'tv',\n  },\n  {\n    text: 'General',\n    value: 'General',\n    icon: 'magnet',\n  },\n];\n\ntype Action = { type: 'CleanQuery' }\n| { type: 'StartSearch', query: string }\n| { type: 'FinishSearch', results: ResultView[] }\n| { type: 'UpdateSelection', selection: string };\n\ntype MediaType = 'movie' | 'tvshow' | 'season' | 'episode';\ninterface Info {\n  plotoutline: string,\n  tagline: string,\n  code: string,\n  year: number,\n  rating: number,\n  genre: string[],\n  date: Date,\n  mediatype: MediaType\n}\n\ninterface Art {\n  thumb: string\n}\n\ninterface Result {\n  label: string\n  info: Info,\n  art: Art,\n  path: string,\n  is_playable: boolean,\n}\n\ninterface ResultView {\n  title: string,\n  tagline: string,\n  description: string,\n  year: number,\n  rating: number,\n  genre: string[],\n  date: Date\n  image: string,\n  path: string,\n  mediatype: MediaType,\n  key: string,\n}\n\ninterface State {\n  loading: boolean,\n  results: ResultView[],\n  value: string,\n}\n\nconst initialState: State = {\n  loading: false,\n  results: [],\n  value: '',\n};\n\nfunction queryReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'CleanQuery':\n      return initialState;\n    case 'StartSearch':\n      return { ...state, loading: true, value: action.query };\n    case 'FinishSearch':\n      return { ...state, loading: false, results: action.results };\n    case 'UpdateSelection':\n      return { ...state, value: action.selection };\n  }\n}\n\nconst resultRenderer = (item: SearchResultProps) => {\n  const result = item as ResultView;\n  return (\n    <ItemGroup>\n      <Item>\n        <Item.Image size=\"small\" src={result.image} />\n        <Item.Content>\n          <Item.Header>{result.title}</Item.Header>\n          <Item.Meta>{result.tagline}</Item.Meta>\n          <Item.Description>{result.description}</Item.Description>\n          {result.mediatype !== 'season' && (\n            <Item.Extra>\n              {`${result.rating} - ${result.genre?.join(', ')} - ${result.date?.toString() ?? result.year ?? '-'}`}\n            </Item.Extra>\n          )}\n        </Item.Content>\n      </Item>\n    </ItemGroup>\n  );\n};\n\nfunction getSearchType(torrentType: TorrentType): string {\n  switch (torrentType) {\n    case 'Movies':\n      return 'movies';\n    case 'TvShows':\n      return 'shows';\n    case 'General':\n      return '.';\n  }\n}\n\nasync function querySearchResults(url: string, dispatch: React.Dispatch<Action>) {\n  const response = await fetch(url);\n  const items = (await response.json()).items as Result[];\n\n  dispatch({\n    type: 'FinishSearch',\n    results: items.filter((i) => i.info !== undefined).map((i) => ({\n      image: i.art.thumb,\n      key: i.info.code,\n      description: i.info.plotoutline,\n      title: i.label,\n      tagline: i.info.tagline,\n      year: i.info.year,\n      date: i.info.date,\n      genre: i.info.genre,\n      rating: i.info.rating,\n      mediatype: i.info.mediatype,\n      path: i.path,\n    })),\n  });\n}\n\ninterface IStatisticsProps {\n  /**\n   * Total download rate in kB/s\n   */\n  totalDownloadRate: number,\n\n  /**\n   * Total upload rate in kB/s\n   */\n  totalUploadRate: number,\n}\n\nconst Statistics: FC<IStatisticsProps> = ({ totalDownloadRate, totalUploadRate }: IStatisticsProps) => {\n  const [torrentType, setTorrentType] = useState<TorrentType>('Movies');\n  const searcRef = useRef<any>();\n  const [state, dispatch] = useReducer(queryReducer, initialState);\n  const { loading, results, value } = state;\n\n  const debounceSearchChange = useDebouncedCallback(async (query: string) => {\n    const searchType = getSearchType(torrentType);\n\n    await querySearchResults(`/${searchType}/search?q=${query}`, dispatch);\n  }, debounceWaitTime);\n\n  const handleQueryChange = async (query: string) => {\n    dispatch({\n      type: 'StartSearch', query,\n    });\n\n    if (query.trim().length === 0) {\n      dispatch({\n        type: 'CleanQuery',\n      });\n      return;\n    }\n\n    await debounceSearchChange(query);\n  };\n\n  const handleResultSelect = async (data: ResultView): Promise<void> => {\n    const path = data.path.replace('plugin://plugin.video.elementum/', '');\n    const url = `/${path}?external=1`;\n\n    switch (torrentType) {\n      case 'Movies':\n        await fetch(url);\n        break;\n      case 'TvShows': {\n        dispatch({\n          type: 'StartSearch', query: value,\n        });\n\n        if (path.includes('links')) {\n          await fetch(url);\n        } else {\n          await querySearchResults(url, dispatch);\n          searcRef.current.open();\n        }\n        break;\n      }\n      case 'General':\n        break;\n    }\n  };\n\n  const handleTorrentTypeChange = (torrentTypeValue: TorrentType) => {\n    setTorrentType(torrentTypeValue);\n    dispatch({\n      type: 'CleanQuery',\n    });\n  };\n\n  return (\n    <>\n      <Grid padded stackable columns=\"3\">\n        <Grid.Row>\n          <Grid.Column width=\"11\">\n            <Grid>\n              <Grid.Row>\n                <Grid.Column mobile=\"7\" computer=\"4\">\n                  <Dropdown\n                    fluid\n                    selection\n                    options={torrentTypes}\n                    defaultValue={torrentTypes[0].value}\n                    onChange={(_, data) => handleTorrentTypeChange(data.value as TorrentType)}\n                  />\n                </Grid.Column>\n                <Grid.Column mobile=\"9\" computer=\"12\">\n                  <Search\n                    fluid\n                    placeholder=\"Search\"\n                    loading={loading}\n                    results={results}\n                    value={value}\n                    onSearchChange={(_, data) => handleQueryChange(data.value ?? '')}\n                    resultRenderer={resultRenderer}\n                    onResultSelect={(_, data) => handleResultSelect(data.result)}\n                    ref={searcRef}\n                    minCharacters={3}\n                  />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n          <Grid.Column width=\"5\">\n            <Statistic.Group widths=\"2\" size=\"tiny\">\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow down\" size=\"small\" />\n                  {` ${totalDownloadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow up\" size=\"small\" />\n                  {` ${totalUploadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default Statistics;\n","import React, { useState } from 'react';\nimport {\n  Button, Checkbox, Message, Modal, Popup,\n} from 'semantic-ui-react';\n\ninterface ITorrentListProps {\n  torrentIdsToDelete: string[]\n}\n\nconst DeleteTorrentModal = ({ torrentIdsToDelete } : ITorrentListProps): JSX.Element => {\n  const [open, setOpen] = useState(false);\n  const [deleteFiles, setDeleteFiles] = useState(false);\n  const hasSelectedTorrents = torrentIdsToDelete.length !== 0;\n\n  // TODO: handle response\n  // TODO: update list after executing fetch\n  function deleteSelectedTorrents() {\n    torrentIdsToDelete.map((id) => fetch(`/torrents/delete/${id}?files=${deleteFiles}`));\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      open={open}\n      trigger={(\n        <Popup\n          trigger={<p><Button content=\"Delete\" disabled={!hasSelectedTorrents} onClick={(_, _data) => setOpen(true)} /></p>}\n          content=\"Select at least 1 torrent\"\n          disabled={hasSelectedTorrents}\n          closeOnTriggerClick={false}\n          inverted\n        />\n      )}\n    >\n      <Modal.Header>Delete Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          Are you sure?\n          <br />\n          <Message negative>\n            <Checkbox label=\"Also delete files\" onChange={(e, data) => setDeleteFiles(data.checked ?? false)} />\n          </Message>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"No\" icon=\"undo\" onClick={() => setOpen(false)} />\n        <Button content=\"Yes\" icon=\"trash\" color=\"red\" onClick={() => deleteSelectedTorrents()} />\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default DeleteTorrentModal;\n","import React from 'react';\nimport {\n  Button, Form, Icon, Modal,\n} from 'semantic-ui-react';\n\nfunction UploadTorrentModal(): JSX.Element {\n  const [open, setOpen] = React.useState(false);\n  const [uri, setUri] = React.useState('');\n  const [file, setFile] = React.useState<File>();\n\n  async function addTorrent(path: string, additionalData?: [name: string, value: string][]) {\n    const formData = new FormData();\n    formData.append('uri', uri);\n    formData.append('file', file ?? 'null');\n    additionalData?.forEach((x) => formData.append(x[0], x[1]));\n\n    await fetch(path, {\n      method: 'POST',\n      body: formData,\n    });\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={(\n        <Button icon labelPosition=\"left\" floated=\"right\" primary>\n          <Icon name=\"download\" />\n          Add Torrent\n        </Button>\n      )}\n    >\n      <Modal.Header>Add Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Form>\n            <Form.Input placeholder=\"Magnet or Torrent file URL\" onChange={(e) => setUri(e.target.value)} />\n            <Form.Input type=\"file\" accept=\".torrent\" onChange={(e) => setFile(e.target.files?.item(0) ?? undefined)} />\n          </Form>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"Cancel\" color=\"red\" onClick={() => setOpen(false)} />\n        <Button\n          content=\"Add (all files)\"\n          labelPosition=\"left\"\n          icon=\"download\"\n          color=\"yellow\"\n          onClick={() => addTorrent('/torrents/add', [['all', '1']])}\n        />\n        <Button content=\"Add\" labelPosition=\"left\" icon=\"download\" color=\"blue\" onClick={() => addTorrent('/torrents/add')} />\n        <Button content=\"Stream\" labelPosition=\"left\" icon=\"play\" color=\"green\" onClick={() => addTorrent('/playuri')} />\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default UploadTorrentModal;\n","import React from 'react';\nimport {\n  Button,\n  ButtonProps,\n  Checkbox,\n  CheckboxProps,\n  Icon,\n  Label,\n  Popup,\n  Progress,\n  Statistic,\n  StatisticGroup,\n  StatisticValue,\n  Table,\n} from 'semantic-ui-react';\nimport { ITorrentView } from '../../dataStructure';\n\ninterface ITorrentListItemProps {\n  torrent: ITorrentView,\n  onTorrentSelected: (_torrentId: string, _isChecked: boolean) => void\n}\n\nconst TorrentListItem = ({ torrent, onTorrentSelected }: ITorrentListItemProps): JSX.Element => {\n  const isActive = torrent.status !== 'Finished' && torrent.status !== 'Paused';\n  const statusLabelColor = isActive ? 'green' : 'grey';\n\n  const onResumePause = async (_event: React.FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n    const { checked } = data;\n    const action = checked ? 'resume' : 'pause';\n\n    await fetch(`/torrents/${action}/${torrent.id}`);\n  };\n\n  const onPlay = async (_event: React.MouseEvent<HTMLButtonElement, MouseEvent>, _data: ButtonProps) => {\n    await fetch(`/playuri?resume=${torrent.id}`);\n  };\n\n  return (\n    <>\n      <Table.Row>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Checkbox toggle onChange={onResumePause} checked={isActive} />\n        </Table.Cell>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Checkbox onChange={(_, data) => onTorrentSelected(torrent.id, data.checked ?? false)} checked={torrent.is_selected} />\n        </Table.Cell>\n        <Table.Cell collapsing>\n          <Button color=\"green\" icon=\"play\" floated=\"right\" onClick={onPlay} />\n        </Table.Cell>\n        <Table.Cell>{torrent.name}</Table.Cell>\n        <Table.Cell>\n          <Popup\n            content={`${torrent.progress.toFixed(2)}%`}\n            trigger={<Progress percent={torrent.progress} autoSuccess size=\"small\" />}\n          />\n        </Table.Cell>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Label color={statusLabelColor}>{torrent.status}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup size=\"mini\" widths=\"2\">\n            <Statistic value={torrent.ratio.toFixed(2)} label=\"Seed ratio\" />\n            <Popup\n              content={`Seed time: ${torrent.seeding_time}`}\n              trigger={<Statistic value={`${torrent.time_ratio.toFixed(2)}`} label=\"Time ratio\" />}\n            />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell textAlign=\"center\">\n          <Label>{torrent.size}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow down\" size=\"small\" />\n                {` ${torrent.download_rate.toFixed(2)} kB/s`}\n              </StatisticValue>\n            </Statistic>\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow up\" size=\"small\" />\n                {` ${torrent.upload_rate.toFixed(2)} kB/s`}\n              </StatisticValue>\n            </Statistic>\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic value={torrent.seeders} label=\"Active\" />\n            <Statistic value={torrent.seeders_total} label=\"Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic value={torrent.peers} label=\"Active\" />\n            <Statistic value={torrent.peers_total} label=\"Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n      </Table.Row>\n    </>\n  );\n};\n\nexport default TorrentListItem;\n","import React, { FC, useState } from 'react';\nimport { Checkbox, Table } from 'semantic-ui-react';\nimport DeleteTorrentModal from '../delete-modal';\nimport UploadTorrentModal from '../upload-modal';\nimport TorrentListItem from './torrent';\nimport { ITorrentView } from '../dataStructure';\n\ninterface ITorrentListProps {\n  torrents: ITorrentView[]\n}\n\nconst TorrentList: FC<ITorrentListProps> = ({ torrents }: ITorrentListProps) => {\n  const [selectedTorrents, setSelectedTorrents] = useState<string[]>([]);\n  const torrentList = torrents.map((t) => {\n    const torrent = t;\n    torrent.is_selected = selectedTorrents.includes(t.id); return t;\n  });\n\n  const onTorrentSelected = (torrentId: string, isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedTorrents([...selectedTorrents, torrentId]);\n    } else {\n      setSelectedTorrents(selectedTorrents.filter((t) => t !== torrentId));\n    }\n  };\n\n  const onAllTorrentsSelected = (isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedTorrents(torrents.map((t) => t.id));\n    } else {\n      setSelectedTorrents([]);\n    }\n  };\n\n  return (\n    <>\n      <Table compact=\"very\" size=\"small\" stackable>\n        <Table.Header className=\"mobile-hidden\">\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell>\n              <Checkbox\n                onChange={(_, data) => onAllTorrentsSelected(data.checked ?? false)}\n                checked={torrentList.every((t) => t.is_selected)}\n              />\n            </Table.HeaderCell>\n            <Table.HeaderCell />\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Progres</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            <Table.HeaderCell>Ratios</Table.HeaderCell>\n            <Table.HeaderCell>Size</Table.HeaderCell>\n            <Table.HeaderCell>Rates</Table.HeaderCell>\n            <Table.HeaderCell>Seeds</Table.HeaderCell>\n            <Table.HeaderCell>Peers</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {torrentList.map((t) => (<TorrentListItem key={t.id} torrent={t} onTorrentSelected={onTorrentSelected} />))}\n        </Table.Body>\n        <Table.Footer fullWidth>\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell colSpan={10}>\n              <UploadTorrentModal />\n              <DeleteTorrentModal torrentIdsToDelete={selectedTorrents} />\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </>\n  );\n};\n\nexport default TorrentList;\n","export default __webpack_public_path__ + \"static/media/header.615133c9.jpg\";","export default __webpack_public_path__ + \"static/media/logo.949a48f5.png\";","import React, { useEffect, useState } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Statistics from './statistics-total';\nimport SearchBar from './search-bar';\nimport TorrentList from './torrents-list';\nimport { ITorrent, ITorrentView } from './dataStructure';\nimport 'semantic-ui-css/semantic.min.css';\nimport header from './static/header.jpg';\nimport logo from './static/logo.png';\nimport './style.css';\n\nfunction App(): JSX.Element {\n  const [torrents, setTorrents] = useState<ITorrentView[]>([]);\n\n  useEffect(() => {\n    const getList = async () => {\n      const response = await fetch('/torrents/list');\n      const torrentsList = await response.json() as ITorrent[];\n      setTorrents(torrentsList as ITorrentView[]);\n    };\n\n    void getList();\n    setInterval(() => void getList(), 5000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header>\n        <div style={{\n          backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.33), rgba(0, 0, 0, 0.33)), url(\"${header}\")`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'top',\n          height: '150px',\n          padding: '20px',\n          textAlign: 'center',\n        }}\n        >\n          <a href=\"/web\">\n            <img src={logo} alt=\"Elementum\" height=\"100%\" />\n          </a>\n        </div>\n      </Header>\n      <div>\n        <Statistics\n          downloading={torrents.filter((t) => t.status !== 'Finished').length}\n          finished={torrents.filter((t) => t.status === 'Finished').length}\n          total={torrents.length}\n        />\n        <SearchBar\n          totalDownloadRate={torrents.reduce((rate, item) => rate + item.download_rate, 0)}\n          totalUploadRate={torrents.reduce((rate, item) => rate + item.upload_rate, 0)}\n        />\n        <TorrentList torrents={torrents} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}