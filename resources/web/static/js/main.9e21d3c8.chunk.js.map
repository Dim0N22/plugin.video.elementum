{"version":3,"sources":["statistics-total/index.tsx","search-bar/index.tsx","delete-modal/index.tsx","upload-modal/index.tsx","torrents-list/torrent/index.tsx","torrents-list/index.tsx","torrent-info/index.tsx","static/header.jpg","static/logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Statistics","downloading","finished","total","Statistic","Group","widths","Value","Label","torrentTypes","text","value","icon","initialState","loading","results","queryReducer","state","action","type","query","selection","resultRenderer","item","result","ItemGroup","Item","Image","size","src","image","Content","Header","title","Meta","tagline","Description","description","mediatype","Extra","rating","genre","join","date","toString","year","getSearchType","torrentType","querySearchResults","url","dispatch","a","fetch","response","json","items","filter","i","undefined","info","map","art","thumb","key","code","plotoutline","label","path","totalDownloadRate","totalUploadRate","useState","setTorrentType","searcRef","useRef","useReducer","debounceSearchChange","useDebouncedCallback","searchType","handleQueryChange","trim","length","handleResultSelect","data","replace","includes","current","open","Grid","padded","stackable","columns","Row","Column","width","mobile","computer","Dropdown","fluid","options","defaultValue","onChange","_","torrentTypeValue","Search","placeholder","onSearchChange","onResultSelect","ref","minCharacters","Icon","name","toFixed","DeleteTorrentModal","torrentIdsToDelete","setOpen","deleteFiles","setDeleteFiles","hasSelectedTorrents","Modal","onClose","trigger","Popup","style","display","Button","content","disabled","onClick","_data","closeOnTriggerClick","inverted","Message","negative","Checkbox","e","checked","Actions","color","id","UploadTorrentModal","React","uri","setUri","file","setFile","addTorrent","additionalData","formData","FormData","append","forEach","x","method","body","onOpen","labelPosition","floated","primary","Form","Input","target","accept","files","TorrentListItem","torrent","onSelect","onClicked","isClicked","isActive","status","statusLabelColor","onResumePause","_event","onPlay","Table","active","Cell","collapsing","textAlign","toggle","is_selected","progress","Progress","percent","autoSuccess","StatisticGroup","ratio","seeding_time","time_ratio","StatisticValue","download_rate","upload_rate","seeders","seeders_total","peers","peers_total","TorrentList","torrents","activeTorrent","onSetActiveTorrent","selectedTorrents","setSelectedTorrents","torrentList","t","onTorrentSelected","torrentId","isChecked","compact","className","HeaderCell","every","Body","Footer","fullWidth","colSpan","GetFileTree","shift","childFiles","f","n","pop","List","some","push","TorrentInfo","filesList","setFilesList","piecesList","setPiecesList","setLoading","useEffect","getInfo","regexp","RegExp","match","exec","groups","pieces","split","intervalHandle","setInterval","clearInterval","panes","menuItem","render","Tab","Pane","GridRow","GridColumn","App","setTorrents","setActiveTorrent","getList","torrentsList","backgroundImage","header","backgroundSize","backgroundPosition","height","padding","href","logo","alt","reduce","rate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e21d3c8.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Statistic } from 'semantic-ui-react';\n\ninterface StatisticsProps {\n  downloading: number;\n  finished: number;\n  total: number;\n}\n\nconst Statistics: FC<StatisticsProps> = ({ downloading, finished, total }: StatisticsProps) => (\n  <>\n    <Statistic.Group widths=\"3\">\n      <Statistic>\n        <Statistic.Value>{downloading}</Statistic.Value>\n        <Statistic.Label>Downloading</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{finished}</Statistic.Value>\n        <Statistic.Label>Finished</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{total}</Statistic.Value>\n        <Statistic.Label>Total</Statistic.Label>\n      </Statistic>\n    </Statistic.Group>\n  </>\n);\n\nexport default Statistics;\n","import React, { FC, useReducer, useRef, useState } from 'react';\nimport { Dropdown, DropdownItemProps, Grid, Icon, Item, ItemGroup, Search, SearchResultProps, Statistic } from 'semantic-ui-react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst debounceWaitTime = 300;\n\ntype TorrentType = 'Movies' | 'TvShows' | 'General';\nconst torrentTypes: DropdownItemProps[] = [\n  {\n    text: 'Movies',\n    value: 'Movies',\n    icon: 'film',\n  },\n  {\n    text: 'TV Shows',\n    value: 'TvShows',\n    icon: 'tv',\n  },\n  {\n    text: 'General',\n    value: 'General',\n    icon: 'magnet',\n  },\n];\n\ntype Action =\n  | { type: 'CleanQuery' }\n  | { type: 'StartSearch'; query: string }\n  | { type: 'FinishSearch'; results: ResultView[] }\n  | { type: 'UpdateSelection'; selection: string };\n\ntype MediaType = 'movie' | 'tvshow' | 'season' | 'episode';\ninterface Info {\n  plotoutline: string;\n  tagline: string;\n  code: string;\n  year: number;\n  rating: number;\n  genre: string[];\n  date: Date;\n  mediatype: MediaType;\n}\n\ninterface Art {\n  thumb: string;\n}\n\ninterface Result {\n  label: string;\n  info: Info;\n  art: Art;\n  path: string;\n  is_playable: boolean;\n}\n\ninterface ResultView {\n  title: string;\n  tagline: string;\n  description: string;\n  year: number;\n  rating: number;\n  genre: string[];\n  date: Date;\n  image: string;\n  path: string;\n  mediatype: MediaType;\n  key: string;\n}\n\ninterface State {\n  loading: boolean;\n  results: ResultView[];\n  value: string;\n}\n\nconst initialState: State = {\n  loading: false,\n  results: [],\n  value: '',\n};\n\nfunction queryReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'CleanQuery':\n      return initialState;\n    case 'StartSearch':\n      return { ...state, loading: true, value: action.query };\n    case 'FinishSearch':\n      return { ...state, loading: false, results: action.results };\n    case 'UpdateSelection':\n      return { ...state, value: action.selection };\n  }\n}\n\nconst resultRenderer = (item: SearchResultProps) => {\n  const result = item as ResultView;\n  return (\n    <ItemGroup>\n      <Item>\n        <Item.Image size=\"small\" src={result.image} />\n        <Item.Content>\n          <Item.Header>{result.title}</Item.Header>\n          <Item.Meta>{result.tagline}</Item.Meta>\n          <Item.Description>{result.description}</Item.Description>\n          {result.mediatype !== 'season' && (\n            <Item.Extra>{`${result.rating} - ${result.genre?.join(', ')} - ${result.date?.toString() ?? result.year ?? '-'}`}</Item.Extra>\n          )}\n        </Item.Content>\n      </Item>\n    </ItemGroup>\n  );\n};\n\nfunction getSearchType(torrentType: TorrentType): string {\n  switch (torrentType) {\n    case 'Movies':\n      return 'movies';\n    case 'TvShows':\n      return 'shows';\n    case 'General':\n      return '.';\n  }\n}\n\nasync function querySearchResults(url: string, dispatch: React.Dispatch<Action>) {\n  const response = await fetch(url);\n  const items = (await response.json()).items as Result[];\n\n  dispatch({\n    type: 'FinishSearch',\n    results: items\n      .filter((i) => i.info !== undefined)\n      .map((i) => ({\n        image: i.art.thumb,\n        key: i.info.code,\n        description: i.info.plotoutline,\n        title: i.label,\n        tagline: i.info.tagline,\n        year: i.info.year,\n        date: i.info.date,\n        genre: i.info.genre,\n        rating: i.info.rating,\n        mediatype: i.info.mediatype,\n        path: i.path,\n      })),\n  });\n}\n\ninterface IStatisticsProps {\n  /**\n   * Total download rate in kB/s\n   */\n  totalDownloadRate: number;\n\n  /**\n   * Total upload rate in kB/s\n   */\n  totalUploadRate: number;\n}\n\nconst Statistics: FC<IStatisticsProps> = ({ totalDownloadRate, totalUploadRate }: IStatisticsProps) => {\n  const [torrentType, setTorrentType] = useState<TorrentType>('Movies');\n  const searcRef = useRef<any>();\n  const [state, dispatch] = useReducer(queryReducer, initialState);\n  const { loading, results, value } = state;\n\n  const debounceSearchChange = useDebouncedCallback(async (query: string) => {\n    const searchType = getSearchType(torrentType);\n\n    await querySearchResults(`/${searchType}/search?q=${query}`, dispatch);\n  }, debounceWaitTime);\n\n  const handleQueryChange = async (query: string) => {\n    dispatch({\n      type: 'StartSearch',\n      query,\n    });\n\n    if (query.trim().length === 0) {\n      dispatch({\n        type: 'CleanQuery',\n      });\n      return;\n    }\n\n    await debounceSearchChange(query);\n  };\n\n  const handleResultSelect = async (data: ResultView): Promise<void> => {\n    const path = data.path.replace('plugin://plugin.video.elementum/', '');\n    const url = `/${path}?external=1`;\n\n    switch (torrentType) {\n      case 'Movies':\n        await fetch(url);\n        break;\n      case 'TvShows': {\n        dispatch({\n          type: 'StartSearch',\n          query: value,\n        });\n\n        if (path.includes('links')) {\n          await fetch(url);\n        } else {\n          await querySearchResults(url, dispatch);\n          searcRef.current.open();\n        }\n        break;\n      }\n      case 'General':\n        break;\n    }\n  };\n\n  const handleTorrentTypeChange = (torrentTypeValue: TorrentType) => {\n    setTorrentType(torrentTypeValue);\n    dispatch({\n      type: 'CleanQuery',\n    });\n  };\n\n  return (\n    <>\n      <Grid padded stackable columns=\"3\">\n        <Grid.Row>\n          <Grid.Column width=\"11\">\n            <Grid>\n              <Grid.Row>\n                <Grid.Column mobile=\"7\" computer=\"4\">\n                  <Dropdown\n                    fluid\n                    selection\n                    options={torrentTypes}\n                    defaultValue={torrentTypes[0].value}\n                    onChange={(_, data) => handleTorrentTypeChange(data.value as TorrentType)}\n                  />\n                </Grid.Column>\n                <Grid.Column mobile=\"9\" computer=\"12\">\n                  <Search\n                    fluid\n                    placeholder=\"Search\"\n                    loading={loading}\n                    results={results}\n                    value={value}\n                    onSearchChange={(_, data) => handleQueryChange(data.value ?? '')}\n                    resultRenderer={resultRenderer}\n                    onResultSelect={(_, data) => handleResultSelect(data.result)}\n                    ref={searcRef}\n                    minCharacters={3}\n                  />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n          <Grid.Column width=\"5\">\n            <Statistic.Group widths=\"2\" size=\"tiny\">\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow down\" size=\"small\" />\n                  {` ${totalDownloadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow up\" size=\"small\" />\n                  {` ${totalUploadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default Statistics;\n","import React, { useState } from 'react';\nimport { Button, Checkbox, Message, Modal, Popup } from 'semantic-ui-react';\n\ninterface ITorrentListProps {\n  torrentIdsToDelete: string[];\n}\n\nconst DeleteTorrentModal = ({ torrentIdsToDelete }: ITorrentListProps): JSX.Element => {\n  const [open, setOpen] = useState(false);\n  const [deleteFiles, setDeleteFiles] = useState(false);\n  const hasSelectedTorrents = torrentIdsToDelete.length !== 0;\n\n  // TODO: handle response\n  // TODO: update list after executing fetch\n  function deleteSelectedTorrents() {\n    torrentIdsToDelete.map((id) => fetch(`/torrents/delete/${id}?files=${deleteFiles}`));\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      open={open}\n      trigger={\n        <Popup\n          trigger={\n            <div style={{ display: 'inline-block' }}>\n              <Button content=\"Delete\" disabled={!hasSelectedTorrents} onClick={(_, _data) => setOpen(true)} />\n            </div>\n          }\n          content=\"Select at least 1 torrent\"\n          disabled={hasSelectedTorrents}\n          closeOnTriggerClick={false}\n          inverted\n        />\n      }\n    >\n      <Modal.Header>Delete Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          Are you sure?\n          <br />\n          <Message negative>\n            <Checkbox label=\"Also delete files\" onChange={(e, data) => setDeleteFiles(data.checked ?? false)} />\n          </Message>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"No\" icon=\"undo\" onClick={() => setOpen(false)} />\n        <Button content=\"Yes\" icon=\"trash\" color=\"red\" onClick={() => deleteSelectedTorrents()} />\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default DeleteTorrentModal;\n","import React from 'react';\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react';\n\nfunction UploadTorrentModal(): JSX.Element {\n  const [open, setOpen] = React.useState(false);\n  const [uri, setUri] = React.useState('');\n  const [file, setFile] = React.useState<File>();\n\n  async function addTorrent(path: string, additionalData?: [name: string, value: string][]) {\n    const formData = new FormData();\n    formData.append('uri', uri);\n    formData.append('file', file ?? 'null');\n    additionalData?.forEach((x) => formData.append(x[0], x[1]));\n\n    await fetch(path, {\n      method: 'POST',\n      body: formData,\n    });\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={\n        <Button icon labelPosition=\"left\" floated=\"right\" primary>\n          <Icon name=\"download\" />\n          Add Torrent\n        </Button>\n      }\n    >\n      <Modal.Header>Add Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Form>\n            <Form.Input placeholder=\"Magnet or Torrent file URL\" onChange={(e) => setUri(e.target.value)} />\n            <Form.Input type=\"file\" accept=\".torrent\" onChange={(e) => setFile(e.target.files?.item(0) ?? undefined)} />\n          </Form>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"Cancel\" color=\"red\" onClick={() => setOpen(false)} />\n        <Button\n          content=\"Add (all files)\"\n          labelPosition=\"left\"\n          icon=\"download\"\n          color=\"yellow\"\n          onClick={() => addTorrent('/torrents/add', [['all', '1']])}\n        />\n        <Button content=\"Add\" labelPosition=\"left\" icon=\"download\" color=\"blue\" onClick={() => addTorrent('/torrents/add')} />\n        <Button content=\"Stream\" labelPosition=\"left\" icon=\"play\" color=\"green\" onClick={() => addTorrent('/playuri')} />\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default UploadTorrentModal;\n","import React from 'react';\nimport {\n  Button,\n  ButtonProps,\n  Checkbox,\n  CheckboxProps,\n  Icon,\n  Label,\n  Popup,\n  Progress,\n  Statistic,\n  StatisticGroup,\n  StatisticValue,\n  Table,\n} from 'semantic-ui-react';\nimport { ITorrentView } from '../../dataStructure';\n\ninterface ITorrentListItemProps {\n  torrent: ITorrentView;\n  isClicked: boolean;\n  onSelect: (_torrentId: string, _isChecked: boolean) => void;\n  onClicked: (torrent: ITorrentView | undefined) => void;\n}\n\nconst TorrentListItem = ({ torrent, onSelect, onClicked, isClicked }: ITorrentListItemProps): JSX.Element => {\n  const isActive = torrent.status !== 'Finished' && torrent.status !== 'Paused';\n  const statusLabelColor = isActive ? 'green' : 'grey';\n\n  const onResumePause = async (_event: React.FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n    const { checked } = data;\n    const action = checked ? 'resume' : 'pause';\n\n    await fetch(`/torrents/${action}/${torrent.id}`);\n  };\n\n  const onPlay = async (_event: React.MouseEvent<HTMLButtonElement, MouseEvent>, _data: ButtonProps) => {\n    await fetch(`/playuri?resume=${torrent.id}`);\n  };\n\n  return (\n    <>\n      <Table.Row onClick={() => onClicked(isClicked ? undefined : torrent)} active={isClicked}>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Checkbox toggle onChange={onResumePause} checked={isActive} />\n        </Table.Cell>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Checkbox onChange={(_, data) => onSelect(torrent.id, data.checked ?? false)} checked={torrent.is_selected} />\n        </Table.Cell>\n        <Table.Cell collapsing>\n          <Button color=\"green\" icon=\"play\" floated=\"right\" onClick={onPlay} />\n        </Table.Cell>\n        <Table.Cell>{torrent.name}</Table.Cell>\n        <Table.Cell>\n          <Popup content={`${torrent.progress.toFixed(2)}%`} trigger={<Progress percent={torrent.progress} autoSuccess size=\"small\" />} />\n        </Table.Cell>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Label color={statusLabelColor}>{torrent.status}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup size=\"mini\" widths=\"2\">\n            <Statistic value={torrent.ratio.toFixed(2)} label=\"Seed ratio\" />\n            <Popup\n              content={`Seed time: ${torrent.seeding_time}`}\n              trigger={<Statistic value={`${torrent.time_ratio.toFixed(2)}`} label=\"Time ratio\" />}\n            />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell textAlign=\"center\">\n          <Label>{torrent.size}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow down\" size=\"small\" />\n                {` ${torrent.download_rate.toFixed(2)} kB/s`}\n              </StatisticValue>\n            </Statistic>\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow up\" size=\"small\" />\n                {` ${torrent.upload_rate.toFixed(2)} kB/s`}\n              </StatisticValue>\n            </Statistic>\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"1\" size=\"mini\">\n            <Statistic value={`${torrent.seeders} / ${torrent.seeders_total}`} label=\"Active / Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"1\" size=\"mini\">\n            <Statistic value={`${torrent.peers} / ${torrent.peers_total}`} label=\"Active / Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n      </Table.Row>\n    </>\n  );\n};\n\nexport default TorrentListItem;\n","import React, { FC, useState } from 'react';\nimport { Checkbox, Table } from 'semantic-ui-react';\nimport DeleteTorrentModal from '../delete-modal';\nimport UploadTorrentModal from '../upload-modal';\nimport TorrentListItem from './torrent';\nimport { ITorrentView } from '../dataStructure';\n\ninterface ITorrentListProps {\n  torrents: ITorrentView[];\n  activeTorrent: ITorrentView | undefined;\n  onSetActiveTorrent: (_torrentId: ITorrentView | undefined) => void;\n}\n\nconst TorrentList: FC<ITorrentListProps> = ({ torrents, activeTorrent, onSetActiveTorrent }: ITorrentListProps) => {\n  const [selectedTorrents, setSelectedTorrents] = useState<string[]>([]);\n  const torrentList = torrents.map((t) => {\n    const torrent = t;\n    torrent.is_selected = selectedTorrents.includes(t.id);\n    return torrent;\n  });\n\n  const onTorrentSelected = (torrentId: string, isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedTorrents([...selectedTorrents, torrentId]);\n    } else {\n      setSelectedTorrents(selectedTorrents.filter((t) => t !== torrentId));\n    }\n  };\n\n  const onAllTorrentsSelected = (isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedTorrents(torrents.map((t) => t.id));\n    } else {\n      setSelectedTorrents([]);\n    }\n  };\n\n  return (\n    <>\n      <Table compact=\"very\" size=\"small\" stackable>\n        <Table.Header className=\"mobile-hidden\">\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell>\n              <Checkbox\n                onChange={(_, data) => onAllTorrentsSelected(data.checked ?? false)}\n                checked={torrentList.every((t) => t.is_selected)}\n              />\n            </Table.HeaderCell>\n            <Table.HeaderCell />\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Progress</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            <Table.HeaderCell>Ratios</Table.HeaderCell>\n            <Table.HeaderCell>Size</Table.HeaderCell>\n            <Table.HeaderCell>Rates</Table.HeaderCell>\n            <Table.HeaderCell>Seeds</Table.HeaderCell>\n            <Table.HeaderCell>Peers</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {torrentList.map((t) => (\n            <TorrentListItem\n              key={t.id}\n              torrent={t}\n              onSelect={onTorrentSelected}\n              onClicked={onSetActiveTorrent}\n              isClicked={activeTorrent?.id === t.id}\n            />\n          ))}\n        </Table.Body>\n        <Table.Footer fullWidth>\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell colSpan={10}>\n              <UploadTorrentModal />\n              <DeleteTorrentModal torrentIdsToDelete={selectedTorrents} />\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </>\n  );\n};\n\nexport default TorrentList;\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable no-restricted-syntax */\nimport React, { useEffect, useState } from 'react';\nimport { Grid, GridColumn, GridRow, List, Tab } from 'semantic-ui-react';\nimport { ITorrentView } from '../dataStructure';\n\ninterface ITorrentInfoItemProps {\n  torrent: ITorrentView;\n  // onTorrentSelected: (_torrentId: string, _isChecked: boolean) => void;\n}\n\n// TODO: Rewrite using a tree\nconst GetFileTree = (files: string[][]): JSX.Element => {\n  const name = files[0].shift();\n  for (const e of files) {\n    if (e[0] === name) {\n      e.shift();\n    }\n  }\n\n  const childFiles = files\n    .filter((f) => f.length === 1)\n    .map((f) => {\n      const n = f.pop();\n      return (\n        <List>\n          <List.Item>\n            <List.Icon name=\"file\" />\n            <List.Content>{n}</List.Content>\n          </List.Item>\n        </List>\n      );\n    });\n\n  if (files.some((f) => f.length > 0)) childFiles.push(GetFileTree(files.filter((f) => f.length > 0)));\n\n  return (\n    <List>\n      <List.Item>\n        <List.Icon name={childFiles.length > 0 ? 'folder' : 'file'} />\n        <List.Content>\n          <List.Header>{name}</List.Header>\n          {childFiles}\n        </List.Content>\n      </List.Item>\n    </List>\n  );\n};\n\nconst TorrentInfo = ({ torrent }: ITorrentInfoItemProps): JSX.Element => {\n  const [filesList, setFilesList] = useState<string[]>([]);\n  const [piecesList, setPiecesList] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const getInfo = async () => {\n      const regexp = new RegExp(`${torrent.id}.+?Files.+?:\\\\s+(?<files>.+?)\\\\n\\\\n.+?Pieces:\\\\s+(?<pieces>.+?)\\\\n\\\\n\\\\n`, 'gs');\n      const response = await fetch('/info');\n      const info = await response.text();\n      const match = regexp.exec(info);\n      if (!match || !match.groups) return;\n\n      const { files, pieces } = match.groups;\n      setFilesList(files.split('\\n').map((f) => f.trim()));\n      setPiecesList(pieces);\n\n      setLoading(false);\n    };\n\n    void getInfo();\n    const intervalHandle = setInterval(() => void getInfo(), 5000);\n    return () => clearInterval(intervalHandle);\n  }, [torrent.name]);\n\n  const panes = [\n    {\n      menuItem: { key: 'general', content: 'General' },\n      render: () => (\n        <Tab.Pane>\n          <Grid>\n            <GridRow>\n              <GridColumn>\n                <div>\n                  <b>Name:</b> {torrent.name}\n                </div>\n                <div>\n                  <b>Size:</b> {torrent.size}\n                </div>\n              </GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: 'files', content: 'Files' },\n      render: () => (\n        <Tab.Pane loading={loading}>\n          <Grid>\n            <GridRow>\n              <GridColumn>{GetFileTree(filesList.map((f) => f.split('/')))}</GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: 'pieces', content: 'Pieces' },\n      render: () => (\n        <Tab.Pane loading={loading}>\n          <Grid>\n            <GridRow>\n              <GridColumn>\n                <div>{piecesList}</div>\n              </GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Tab panes={panes} />\n    </>\n  );\n};\n\nexport default TorrentInfo;\n","export default __webpack_public_path__ + \"static/media/header.615133c9.jpg\";","export default __webpack_public_path__ + \"static/media/logo.949a48f5.png\";","import React, { useEffect, useState } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Statistics from './statistics-total';\nimport SearchBar from './search-bar';\nimport TorrentList from './torrents-list';\nimport TorrentInfo from './torrent-info';\nimport { ITorrent, ITorrentView } from './dataStructure';\nimport 'semantic-ui-css/semantic.min.css';\nimport header from './static/header.jpg';\nimport logo from './static/logo.png';\nimport './style.css';\n\nfunction App(): JSX.Element {\n  const [torrents, setTorrents] = useState<ITorrentView[]>([]);\n  const [activeTorrent, setActiveTorrent] = useState<ITorrentView>();\n\n  useEffect(() => {\n    const getList = async () => {\n      const response = await fetch('/torrents/list');\n      const torrentsList = (await response.json()) as ITorrent[];\n      setTorrents(torrentsList as ITorrentView[]);\n    };\n\n    void getList();\n    setInterval(() => void getList(), 5000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header>\n        <div\n          style={{\n            backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.33), rgba(0, 0, 0, 0.33)), url(\"${header}\")`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'top',\n            height: '150px',\n            padding: '20px',\n            textAlign: 'center',\n          }}\n        >\n          <a href=\"/web\">\n            <img src={logo} alt=\"Elementum\" height=\"100%\" />\n          </a>\n        </div>\n      </Header>\n      <div>\n        <Statistics\n          downloading={torrents.filter((t) => t.status !== 'Finished').length}\n          finished={torrents.filter((t) => t.status === 'Finished').length}\n          total={torrents.length}\n        />\n        <SearchBar\n          totalDownloadRate={torrents.reduce((rate, item) => rate + item.download_rate, 0)}\n          totalUploadRate={torrents.reduce((rate, item) => rate + item.upload_rate, 0)}\n        />\n        <TorrentList torrents={torrents} onSetActiveTorrent={setActiveTorrent} activeTorrent={activeTorrent} />\n        {activeTorrent !== undefined && <TorrentInfo torrent={activeTorrent} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}