{"version":3,"sources":["Services/settings.ts","static/logo.png","menu/index.tsx","search-bar/index.tsx","delete-modal/index.tsx","upload-modal/index.tsx","torrents-list/torrent/index.tsx","torrents-list/index.tsx","torrent-info/piece-map.tsx","torrent-info/index.tsx","App.tsx","index.tsx"],"names":["refreshRateSettingName","getRefreshRate","refreshRate","window","localStorage","getItem","Number","HeaderMenu","useState","refreshRateInSeconds","setRefreshRate","Menu","borderless","color","style","border","Item","header","as","href","Image","size","src","logo","Modal","trigger","position","closeIcon","Header","content","Content","Form","Group","inline","Field","htmlFor","Input","type","min","labelPosition","value","onChange","_event","data","id","Label","Actions","Button","onClick","_data","refreshRateInMs","setItem","toString","saveRefreshRate","location","reload","positive","torrentTypes","text","icon","initialState","loading","results","queryReducer","state","action","query","selection","resultRenderer","item","result","ItemGroup","image","title","Meta","tagline","Description","description","mediatype","Extra","rating","genre","join","date","year","getSearchType","torrentType","querySearchResults","url","dispatch","a","fetch","response","json","items","filter","i","undefined","info","map","art","thumb","key","code","label","plotoutline","path","Statistics","totalDownloadRate","totalUploadRate","active","finished","total","setTorrentType","searcRef","useRef","useReducer","debounceSearchChange","useDebouncedCallback","searchType","handleQueryChange","trim","length","handleResultSelect","replace","includes","current","open","Grid","padded","stackable","columns","Row","verticalAlign","Column","floated","Search","fluid","placeholder","onSearchChange","_","onResultSelect","ref","minCharacters","input","Dropdown","options","defaultValue","torrentTypeValue","width","Statistic","widths","Value","Icon","name","toFixed","DeleteTorrentModal","torrentIdsToDelete","setOpen","deleteFiles","setDeleteFiles","hasSelectedTorrents","onClose","Popup","display","disabled","closeOnTriggerClick","inverted","Message","negative","Checkbox","e","checked","UploadTorrentModal","React","uri","setUri","file","setFile","addTorrent","additionalData","formData","FormData","append","forEach","x","method","body","onOpen","primary","target","accept","files","TorrentListItem","torrent","isClicked","isChecked","onSelect","isActive","status","statusLabelColor","onResumePause","event","stopPropagation","onPlay","Table","Cell","collapsing","textAlign","toggle","progress","Progress","percent","autoSuccess","StatisticGroup","ratio","seeding_time","time_ratio","StatisticValue","download_rate","upload_rate","seeders","seeders_total","peers","peers_total","memo","isEqual","TorrentList","torrents","activeTorrent","onSetActiveTorrent","selectedTorrents","setSelectedTorrents","onTorrentSelected","useCallback","torrentId","st","t","compact","className","HeaderCell","Body","Footer","fullWidth","colSpan","PieceMap","pieces","canvasRef","parentDivRef","useResizeObserver","useDebounce","debouncedWidth","useEffect","canvas","context","getContext","parentDiv","parentWidth","clientWidth","piecesPerLine","Math","floor","PieceSize","height","ceil","pieceColor","fillStyle","fillRect","legendHeight","y","font","pieceSize","drawLegendItem","fillText","drawLegend","draw","renderFileTree","fileTree","tree","f","parentNode","pathChunk","getFileTree","List","renderTree","Object","keys","k","isFolder","TorrentInfo","filesList","setFilesList","piecesList","setPiecesList","setLoading","getInfo","regexp","RegExp","match","exec","groups","split","p","intervalHandle","setInterval","clearInterval","panes","menuItem","render","Tab","Pane","GridRow","GridColumn","App","setTorrents","setActiveTorrent","getList","fetchedTorrents","reduce","rate","ReactDOM","StrictMode","document","getElementById"],"mappings":"wSAAMA,EAAyB,cAQlBC,EAAiB,WAC5B,IAAMC,EAAcC,OAAOC,aAAaC,QAAQL,GAChD,OAAOM,OAAM,OAACJ,QAAD,IAACA,IATW,MCDZ,MAA0B,iC,OCmD1BK,EA9CI,WAAoB,IAAD,EACWC,oBAAiB,kBAAMP,IAAmB,OADrD,mBAC7BQ,EAD6B,KACPC,EADO,KASpC,OACE,eAACC,EAAA,EAAD,CAAMC,YAAU,EAACC,MAAM,QAAQC,MAAO,CAAEC,OAAQ,QAAhD,UACE,eAACJ,EAAA,EAAKK,KAAN,CAAWC,QAAM,EAACC,GAAG,IAAIC,KAAK,OAA9B,UACE,cAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,IAAKC,IAD1B,eAIA,eAACC,EAAA,EAAD,CAAOC,QAAS,cAACd,EAAA,EAAKK,KAAN,CAAWU,SAAS,QAApB,sBAAkDC,WAAS,EAA3E,UACE,cAACH,EAAA,EAAMI,OAAP,CAAcC,QAAQ,aACtB,cAACL,EAAA,EAAMM,QAAP,UACE,cAACC,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,CAAYC,QAAM,EAAlB,SACE,eAACF,EAAA,EAAKG,MAAN,WACE,uBAAOC,QAAQ,eAAf,2BACA,eAACC,EAAA,EAAD,CACEC,KAAK,SACLC,IAAI,IACJC,cAAc,QACdC,MAAO/B,EACPgC,SAAU,SAACC,EAAQC,GAAT,OAAkBjC,EAAeJ,OAAOqC,EAAKH,SALzD,UAOE,uBAAOI,GAAG,iBACV,cAACC,EAAA,EAAD,kCAMV,cAACrB,EAAA,EAAMsB,QAAP,UACE,cAACC,EAAA,EAAD,CAAQC,QAlCK,SAACN,EAAiBO,IFLV,SAAC/C,GAC9B,IAAMgD,EAAkBhD,EACxBC,OAAOC,aAAa+C,QAAQnD,EAAwBkD,EAAgBE,YEKlEC,CAA8B,KADV5C,EAAuB,EAAI,EAAIA,IAEnDN,OAAOmD,SAASC,UA+BqBC,UAAQ,EAAvC,2B,+ECnCJC,EAAoC,CACxC,CACEC,KAAM,SACNlB,MAAO,SACPmB,KAAM,QAER,CACED,KAAM,WACNlB,MAAO,UACPmB,KAAM,MAER,CACED,KAAM,UACNlB,MAAO,UACPmB,KAAM,WAsDJC,EAAsB,CAC1BC,SAAS,EACTC,QAAS,GACTtB,MAAO,IAGT,SAASuB,EAAaC,EAAcC,GAClC,OAAQA,EAAO5B,MACb,IAAK,aACH,OAAOuB,EACT,IAAK,cACH,OAAO,2BAAKI,GAAZ,IAAmBH,SAAS,EAAMrB,MAAOyB,EAAOC,QAClD,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBH,SAAS,EAAOC,QAASG,EAAOH,UACrD,IAAK,kBACH,OAAO,2BAAKE,GAAZ,IAAmBxB,MAAOyB,EAAOE,aAIvC,IAAMC,EAAiB,SAACC,GAA6B,IAAD,QAC5CC,EAASD,EACf,OACE,cAACE,EAAA,EAAD,UACE,eAACvD,EAAA,EAAD,WACE,cAACA,EAAA,EAAKI,MAAN,CAAYC,KAAK,QAAQC,IAAKgD,EAAOE,QACrC,eAACxD,EAAA,EAAKc,QAAN,WACE,cAACd,EAAA,EAAKY,OAAN,UAAc0C,EAAOG,QACrB,cAACzD,EAAA,EAAK0D,KAAN,UAAYJ,EAAOK,UACnB,cAAC3D,EAAA,EAAK4D,YAAN,UAAmBN,EAAOO,cACJ,WAArBP,EAAOQ,WACN,cAAC9D,EAAA,EAAK+D,MAAN,oBAAgBT,EAAOU,OAAvB,wBAAmCV,EAAOW,aAA1C,aAAmC,EAAcC,KAAK,MAAtD,4CAAiEZ,EAAOa,YAAxE,aAAiE,EAAa/B,kBAA9E,QAA4FkB,EAAOc,YAAnG,QAA2G,gBAQvH,SAASC,EAAcC,GACrB,OAAQA,GACN,IAAK,SACH,MAAO,SACT,IAAK,UACH,MAAO,QACT,IAAK,UACH,MAAO,K,SAIEC,E,gFAAf,WAAkCC,EAAaC,GAA/C,iBAAAC,EAAA,sEACyBC,MAAMH,GAD/B,cACQI,EADR,gBAEuBA,EAASC,OAFhC,OAEQC,EAFR,OAEwCA,MAEtCL,EAAS,CACPpD,KAAM,eACNyB,QAASgC,EACNC,QAAO,SAACC,GAAD,YAAkBC,IAAXD,EAAEE,QAChBC,KAAI,SAACH,GAAD,MAAQ,CACXxB,MAAOwB,EAAEI,IAAIC,MACbC,IAAI,GAAD,OAAKN,EAAEE,KAAKK,KAAZ,YAAoBP,EAAEQ,OACzB3B,YAAamB,EAAEE,KAAKO,YACpBhC,MAAOuB,EAAEQ,MACT7B,QAASqB,EAAEE,KAAKvB,QAChBS,KAAMY,EAAEE,KAAKd,KACbD,KAAMa,EAAEE,KAAKf,KACbF,MAAOe,EAAEE,KAAKjB,MACdD,OAAQgB,EAAEE,KAAKlB,OACfF,UAAWkB,EAAEE,KAAKpB,UAClB4B,KAAMV,EAAEU,WAnBhB,4C,sBAmDA,IAkIeC,EAlI0B,SAAC,GAAuF,IAArFC,EAAoF,EAApFA,kBAAmBC,EAAiE,EAAjEA,gBAAiBC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,MAA8B,EACxFxG,mBAAsB,UADkE,mBACvH8E,EADuH,KAC1G2B,EAD0G,KAExHC,EAAWC,mBAF6G,EAGpGC,qBAAWrD,EAAcH,GAH2E,mBAGvHI,EAHuH,KAGhHyB,EAHgH,KAItH5B,EAA4BG,EAA5BH,QAASC,EAAmBE,EAAnBF,QAAStB,EAAUwB,EAAVxB,MAEpB6E,EAAuBC,YAAoB,uCAAC,WAAOpD,GAAP,eAAAwB,EAAA,6DAC1C6B,EAAalC,EAAcC,GADe,SAG1CC,EAAmB,IAAD,OAAKgC,EAAL,qBAA4BrD,GAASuB,GAHb,2CAAD,sDAjL1B,KAuLjB+B,EAAiB,uCAAG,WAAOtD,GAAP,SAAAwB,EAAA,yDACxBD,EAAS,CACPpD,KAAM,cACN6B,UAG0B,IAAxBA,EAAMuD,OAAOC,OANO,uBAOtBjC,EAAS,CACPpD,KAAM,eARc,0CAalBgF,EAAqBnD,GAbH,2CAAH,sDAgBjByD,EAAkB,uCAAG,WAAOhF,GAAP,iBAAA+C,EAAA,sDACnBgB,EAAO/D,EAAK+D,KAAKkB,QAAQ,mCAAoC,IAC7DpC,EAFmB,WAETkB,EAFS,oBAIjBpB,EAJiB,OAKlB,WALkB,OAQlB,YARkB,OAsBlB,YAtBkB,wCAMfK,MAAMH,GANS,6CASrBC,EAAS,CACPpD,KAAM,cACN6B,MAAO1B,KAGLkE,EAAKmB,SAAS,SAdG,kCAeblC,MAAMH,GAfO,iDAiBbD,EAAmBC,EAAKC,GAjBX,QAkBnByB,EAASY,QAAQC,OAlBE,wFAAH,sDAkCxB,OACE,mCACE,cAACC,EAAA,EAAD,CAAMC,OAAO,eAAeC,WAAS,EAACC,QAAQ,IAA9C,SACE,eAACH,EAAA,EAAKI,IAAN,CAAUC,cAAc,SAAxB,UACE,cAACL,EAAA,EAAKM,OAAN,CAAaC,QAAQ,OAArB,SACE,cAACC,EAAA,EAAD,CACEC,OAAK,EACLC,YAAY,SACZ7E,QAASA,EACTC,QAASA,EACTtB,MAAOA,EACPmG,eAAgB,SAACC,EAAGjG,GAAJ,aAAa6E,EAAiB,UAAC7E,EAAKH,aAAN,QAAe,KAC7D4B,eAAgBA,EAChByE,eAAgB,SAACD,EAAGjG,GAAJ,OAAagF,EAAmBhF,EAAK2B,SACrDwE,IAAK5B,EACL6B,cAAe,EACfC,MAAO,CACLrF,KAAM,SACNM,OACE,cAACgF,EAAA,EAAD,CACER,OAAK,EACLtE,WAAS,EACT+E,QAASzF,EACT0F,aAAc1F,EAAa,GAAGjB,MAC9BC,SAAU,SAACmG,EAAGjG,GAAJ,OA/BKyG,EA+BgCzG,EAAKH,MA9BpEyE,EAAemC,QACf3D,EAAS,CACPpD,KAAM,eAHsB,IAAC+G,UAqCzB,cAACpB,EAAA,EAAKM,OAAN,CAAae,MAAM,IAAnB,SACE,eAACC,EAAA,EAAUtH,MAAX,CAAiBuH,OAAO,IAAIlI,KAAK,OAAjC,UACE,eAACiI,EAAA,EAAD,WACE,cAACA,EAAA,EAAUE,MAAX,UAAkB1C,IAClB,cAACwC,EAAA,EAAUzG,MAAX,wBAEF,eAACyG,EAAA,EAAD,WACE,cAACA,EAAA,EAAUE,MAAX,UAAkBzC,IAClB,cAACuC,EAAA,EAAUzG,MAAX,0BAEF,eAACyG,EAAA,EAAD,WACE,cAACA,EAAA,EAAUE,MAAX,UAAkBxC,IAClB,cAACsC,EAAA,EAAUzG,MAAX,4BAIN,cAACmF,EAAA,EAAKM,OAAN,CAAaC,QAAQ,QAArB,SACE,eAACe,EAAA,EAAUtH,MAAX,CAAiBuH,OAAO,IAAIlI,KAAK,OAAjC,UACE,cAACiI,EAAA,EAAD,UACE,eAACA,EAAA,EAAUE,MAAX,WACE,cAACC,EAAA,EAAD,CAAMC,KAAK,aAAarI,KAAK,UAD/B,WAEOuF,EAAkB+C,QAAQ,GAFjC,cAKF,cAACL,EAAA,EAAD,UACE,eAACA,EAAA,EAAUE,MAAX,WACE,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWrI,KAAK,UAD7B,WAEOwF,EAAgB8C,QAAQ,GAF/B,2B,6CC7ODC,EAhDY,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,mBAAyD,EAC7DrJ,oBAAS,GADoD,mBAC9EuH,EAD8E,KACxE+B,EADwE,OAE/CtJ,oBAAS,GAFsC,mBAE9EuJ,EAF8E,KAEjEC,EAFiE,KAG/EC,EAAoD,IAA9BJ,EAAmBnC,OAS/C,OACE,eAAClG,EAAA,EAAD,CACE0I,QAAS,kBAAMJ,GAAQ,IACvB/B,KAAMA,EACNtG,QACE,cAAC0I,EAAA,EAAD,CACE1I,QACE,qBAAKX,MAAO,CAAEsJ,QAAS,gBAAvB,SACE,cAACrH,EAAA,EAAD,CAAQlB,QAAQ,SAASwI,UAAWJ,EAAqBjH,QAAS,SAAC4F,EAAG3F,GAAJ,OAAc6G,GAAQ,QAG5FjI,QAAQ,4BACRwI,SAAUJ,EACVK,qBAAqB,EACrBC,UAAQ,IAbd,UAiBE,cAAC/I,EAAA,EAAMI,OAAP,6BACA,cAACJ,EAAA,EAAMM,QAAP,UACE,eAACN,EAAA,EAAMoD,YAAP,2BAEE,uBACA,cAAC4F,EAAA,EAAD,CAASC,UAAQ,EAAjB,SACE,cAACC,EAAA,EAAD,CAAUlE,MAAM,oBAAoB/D,SAAU,SAACkI,EAAGhI,GAAJ,aAAaqH,EAAc,UAACrH,EAAKiI,eAAN,oBAI/E,eAACpJ,EAAA,EAAMsB,QAAP,WACE,cAACC,EAAA,EAAD,CAAQlB,QAAQ,KAAK8B,KAAK,OAAOX,QAAS,kBAAM8G,GAAQ,MACxD,cAAC/G,EAAA,EAAD,CAAQlB,QAAQ,MAAM8B,KAAK,QAAQ9C,MAAM,MAAMmC,QAAS,kBAlC5D6G,EAAmB1D,KAAI,SAACvD,GAAD,OAAQ+C,MAAM,oBAAD,OAAqB/C,EAArB,kBAAiCmH,YACrED,GAAQ,aC0CGe,MAvDf,WAA4C,IAAD,EACjBC,IAAMtK,UAAS,GADE,mBAClCuH,EADkC,KAC5B+B,EAD4B,OAEnBgB,IAAMtK,SAAS,IAFI,mBAElCuK,EAFkC,KAE7BC,EAF6B,OAGjBF,IAAMtK,WAHW,mBAGlCyK,EAHkC,KAG5BC,EAH4B,cAK1BC,EAL0B,gFAKzC,WAA0BzE,EAAc0E,GAAxC,eAAA1F,EAAA,6DACQ2F,EAAW,IAAIC,UACZC,OAAO,MAAOR,GACvBM,EAASE,OAAO,OAAhB,OAAwBN,QAAxB,IAAwBA,IAAQ,QAClB,OAAdG,QAAc,IAAdA,KAAgBI,SAAQ,SAACC,GAAD,OAAOJ,EAASE,OAAOE,EAAE,GAAIA,EAAE,OAJzD,SAMQ9F,MAAMe,EAAM,CAChBgF,OAAQ,OACRC,KAAMN,IARV,OAUEvB,GAAQ,GAVV,4CALyC,sBAkBzC,OACE,eAACtI,EAAA,EAAD,CACE0I,QAAS,kBAAMJ,GAAQ,IACvB8B,OAAQ,kBAAM9B,GAAQ,IACtB/B,KAAMA,EACNtG,QACE,eAACsB,EAAA,EAAD,CAAQY,MAAI,EAACpB,cAAc,OAAOgG,QAAQ,QAAQsD,SAAO,EAAzD,UACE,cAACpC,EAAA,EAAD,CAAMC,KAAK,aADb,iBALJ,UAWE,cAAClI,EAAA,EAAMI,OAAP,0BACA,cAACJ,EAAA,EAAMM,QAAP,UACE,cAACN,EAAA,EAAMoD,YAAP,UACE,eAAC7C,EAAA,EAAD,WACE,cAACA,EAAA,EAAKK,MAAN,CAAYsG,YAAY,6BAA6BjG,SAAU,SAACkI,GAAD,OAAOK,EAAOL,EAAEmB,OAAOtJ,UACtF,cAACT,EAAA,EAAKK,MAAN,CAAYC,KAAK,OAAO0J,OAAO,WAAWtJ,SAAU,SAACkI,GAAD,eAAOO,EAAO,oBAACP,EAAEmB,OAAOE,aAAV,aAAC,EAAgB3H,KAAK,UAAtB,aAA4B4B,aAIpG,eAACzE,EAAA,EAAMsB,QAAP,WACE,cAACC,EAAA,EAAD,CAAQlB,QAAQ,SAAShB,MAAM,MAAMmC,QAAS,kBAAM8G,GAAQ,MAC5D,cAAC/G,EAAA,EAAD,CACElB,QAAQ,kBACRU,cAAc,OACdoB,KAAK,WACL9C,MAAM,SACNmC,QAAS,kBAAMmI,EAAW,gBAAiB,CAAC,CAAC,MAAO,UAEtD,cAACpI,EAAA,EAAD,CAAQlB,QAAQ,MAAMU,cAAc,OAAOoB,KAAK,WAAW9C,MAAM,OAAOmC,QAAS,kBAAMmI,EAAW,oBAClG,cAACpI,EAAA,EAAD,CAAQlB,QAAQ,SAASU,cAAc,OAAOoB,KAAK,OAAO9C,MAAM,QAAQmC,QAAS,kBAAMmI,EAAW,sB,2BC1BpGc,EAAkB,SAAC,GAA8F,IAA5FC,EAA2F,EAA3FA,QAASC,EAAkF,EAAlFA,UAAWC,EAAuE,EAAvEA,UAAWC,EAA4D,EAA5DA,SAAUrJ,EAAkD,EAAlDA,QAC5DsJ,EAA8B,aAAnBJ,EAAQK,QAA4C,WAAnBL,EAAQK,OACpDC,EAAmBF,EAAW,QAAU,OAExCG,EAAa,uCAAG,WAAOC,EAA0C/J,GAAjD,iBAAA+C,EAAA,6DACpBgH,EAAMC,kBACE/B,EAAYjI,EAAZiI,QACF3G,EAAS2G,EAAU,SAAW,QAHhB,SAKdjF,MAAM,aAAD,OAAc1B,EAAd,YAAwBiI,EAAQtJ,KALvB,2CAAH,wDAabgK,EAAM,uCAAG,WAAOF,EAAwDzJ,GAA/D,SAAAyC,EAAA,6DACbgH,EAAMC,kBADO,SAEPhH,MAAM,mBAAD,OAAoBuG,EAAQtJ,KAF1B,2CAAH,wDAKZ,OACE,mCACE,eAACiK,EAAA,EAAMzE,IAAP,CAAWpF,QAAS,kBAAMA,EAAQmJ,OAAYlG,EAAYiG,IAAUpF,OAAQqF,EAA5E,UACE,cAACU,EAAA,EAAMC,KAAP,CAAYC,YAAU,EAACC,UAAU,SAAjC,SACE,cAACtC,EAAA,EAAD,CAAUuC,QAAM,EAACxK,SAAUgK,EAAe7B,QAAS0B,MAErD,cAACO,EAAA,EAAMC,KAAP,CAAYC,YAAU,EAACC,UAAU,SAAjC,SACE,cAACtC,EAAA,EAAD,CAAUE,QAASwB,EAAW3J,SAjBd,SAACiK,EAA0C/J,GAAyB,IAAD,EACzF+J,EAAMC,kBACNN,EAASH,EAAQtJ,GAAT,UAAaD,EAAKiI,eAAlB,eAiBJ,cAACiC,EAAA,EAAMC,KAAP,CAAYC,YAAU,EAAtB,SACE,cAAChK,EAAA,EAAD,CAAQlC,MAAM,QAAQ8C,KAAK,OAAO4E,QAAQ,QAAQvF,QAAS4J,MAE7D,cAACC,EAAA,EAAMC,KAAP,UAAaZ,EAAQxC,OACrB,cAACmD,EAAA,EAAMC,KAAP,UACE,cAAC3C,EAAA,EAAD,CAAOtI,QAAO,UAAKqK,EAAQgB,SAASvD,QAAQ,GAA9B,KAAqClI,QAAS,cAAC0L,EAAA,EAAD,CAAUC,QAASlB,EAAQgB,SAAUG,aAAW,EAAChM,KAAK,cAEpH,cAACwL,EAAA,EAAMC,KAAP,CAAYC,YAAU,EAACC,UAAU,SAAjC,SACE,cAACnK,EAAA,EAAD,CAAOhC,MAAO2L,EAAd,SAAiCN,EAAQK,WAE3C,cAACM,EAAA,EAAMC,KAAP,UACE,eAACQ,EAAA,EAAD,CAAgBjM,KAAK,OAAOkI,OAAO,IAAnC,UACE,cAACD,EAAA,EAAD,CAAW9G,MAAO0J,EAAQqB,MAAM5D,QAAQ,GAAInD,MAAM,eAClD,cAAC2D,EAAA,EAAD,CACEtI,QAAO,qBAAgBqK,EAAQsB,cAC/B/L,QAAS,cAAC6H,EAAA,EAAD,CAAW9G,MAAK,UAAK0J,EAAQuB,WAAW9D,QAAQ,IAAMnD,MAAM,sBAI3E,cAACqG,EAAA,EAAMC,KAAP,CAAYE,UAAU,SAAtB,SACE,cAACnK,EAAA,EAAD,UAAQqJ,EAAQ7K,SAElB,cAACwL,EAAA,EAAMC,KAAP,UACE,eAACQ,EAAA,EAAD,CAAgB/D,OAAO,IAAIlI,KAAK,OAAhC,UACE,cAACiI,EAAA,EAAD,UACE,eAACoE,EAAA,EAAD,WACE,cAACjE,EAAA,EAAD,CAAMC,KAAK,aAAarI,KAAK,UAD/B,WAEO6K,EAAQyB,cAAchE,QAAQ,GAFrC,cAKF,cAACL,EAAA,EAAD,UACE,eAACoE,EAAA,EAAD,WACE,cAACjE,EAAA,EAAD,CAAMC,KAAK,WAAWrI,KAAK,UAD7B,WAEO6K,EAAQ0B,YAAYjE,QAAQ,GAFnC,mBAON,cAACkD,EAAA,EAAMC,KAAP,UACE,cAACQ,EAAA,EAAD,CAAgB/D,OAAO,IAAIlI,KAAK,OAAhC,SACE,cAACiI,EAAA,EAAD,CAAW9G,MAAK,UAAK0J,EAAQ2B,QAAb,cAA0B3B,EAAQ4B,eAAiBtH,MAAM,uBAG7E,cAACqG,EAAA,EAAMC,KAAP,UACE,cAACQ,EAAA,EAAD,CAAgB/D,OAAO,IAAIlI,KAAK,OAAhC,SACE,cAACiI,EAAA,EAAD,CAAW9G,MAAK,UAAK0J,EAAQ6B,MAAb,cAAwB7B,EAAQ8B,aAAexH,MAAM,6BAQlEsE,MAAMmD,KAAKhC,EAAiBiC,KC7B5BC,GApE4B,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,cAAeC,EAA4C,EAA5CA,mBAA4C,EACjE9N,mBAAmB,IAD8C,mBAC1G+N,EAD0G,KACxFC,EADwF,KAG3GC,EAAoBC,uBAAY,SAACC,EAAmBvC,GAEtDoC,EADEpC,EACkB,SAACwC,GAAD,4BAAYA,GAAZ,CAAgBD,KAEhB,SAACC,GAAD,OAAQA,EAAG7I,QAAO,SAAC8I,GAAD,OAAOA,IAAMF,SAEpD,IAUH,OACE,mCACE,eAAC9B,EAAA,EAAD,CAAOiC,QAAQ,OAAOzN,KAAK,QAAQ6G,WAAS,EAA5C,UACE,cAAC2E,EAAA,EAAMjL,OAAP,CAAcmN,UAAU,gBAAxB,SACE,eAAClC,EAAA,EAAMzE,IAAP,WACE,cAACyE,EAAA,EAAMmC,WAAP,IACA,cAACnC,EAAA,EAAMmC,WAAP,UACE,cAACtE,EAAA,EAAD,CACEjI,SAAU,SAACmG,EAAGjG,GAAJ,MAhBOyJ,EAgBP,OAhBOA,EAgB2B,UAACzJ,EAAKiI,eAAN,cAdtD4D,EADEpC,EACkBgC,EAASjI,KAAI,SAAC0I,GAAD,OAAOA,EAAEjM,MAEtB,KAaVgI,QAAS2D,EAAiB7G,QAAU0G,EAAS1G,WAGjD,cAACmF,EAAA,EAAMmC,WAAP,IACA,cAACnC,EAAA,EAAMmC,WAAP,mBACA,cAACnC,EAAA,EAAMmC,WAAP,uBACA,cAACnC,EAAA,EAAMmC,WAAP,qBACA,cAACnC,EAAA,EAAMmC,WAAP,qBACA,cAACnC,EAAA,EAAMmC,WAAP,mBACA,cAACnC,EAAA,EAAMmC,WAAP,oBACA,cAACnC,EAAA,EAAMmC,WAAP,oBACA,cAACnC,EAAA,EAAMmC,WAAP,yBAGJ,cAACnC,EAAA,EAAMoC,KAAP,UACGb,EAASjI,KAAI,SAAC0I,GAAD,OACZ,cAAC,EAAD,CAEE3C,QAAS2C,EACTxC,SAAUoC,EACVzL,QAASsL,EACTnC,WAAwB,OAAbkC,QAAa,IAAbA,OAAA,EAAAA,EAAezL,MAAOiM,EAAEjM,GACnCwJ,UAAWmC,EAAiB1G,SAASgH,EAAEjM,KALlCiM,EAAEjM,SASb,cAACiK,EAAA,EAAMqC,OAAP,CAAcC,WAAS,EAAvB,SACE,eAACtC,EAAA,EAAMzE,IAAP,WACE,cAACyE,EAAA,EAAMmC,WAAP,IACA,eAACnC,EAAA,EAAMmC,WAAP,CAAkBI,QAAS,GAA3B,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAoBvF,mBAAoB0E,kB,2DCkBvCc,GA5BE,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,OACZC,EAAYpI,iBAA0B,MACtCqI,EAAerI,iBAAuB,MACpCkC,EAAUoG,aAAkC,CAAE3G,IAAK0G,IAAnDnG,MAHoD,EAInCqG,uBAAYrG,EAAO,KAArCsG,EAJqD,oBAqB5D,OAfAC,qBAAU,WACR,GAAKD,EAAL,CAEA,IAAME,EAASN,EAAUzH,QACzB,GAAK+H,EAAL,CAEA,IAAMC,EAAUD,EAAOE,WAAW,MAClC,GAAKD,EAAL,CAEA,IAAME,EAAYR,EAAa1H,QAC1BkI,GAhDI,SAACA,EAA2BF,EAAmCR,GAC1E,IAAMW,EAAcD,EAAUE,YACxBC,EAAgBC,KAAKC,MAAMJ,EAtBlBK,GAuBTC,EAvBSD,EAuBAF,KAAKI,KAAKlB,EAAO5H,OAASyI,GAGjCN,EAAWC,EAAXD,OACRA,EAAOxG,MAAQ4G,EACfJ,EAAOU,OAASA,EAJK,GAMrB,IAAK,IAAIvK,EAAI,EAAGA,EAAIsJ,EAAO5H,OAAQ1B,GAAK,EAAG,CACzC,IAAIyK,OAAU,EAEd,OAAQnB,EAAOtJ,IACb,IAAK,IACHyK,EAAa,UACb,MACF,IAAK,IACHA,EAAa,UACb,MACF,QACEA,EAAa,UAIjBX,EAAQY,UAAYD,EACpBX,EAAQa,SAAqB3K,EAAImK,EA9CpBG,IA8CoCF,KAAKC,MAAMrK,EAAImK,GAhDlD,MAIC,SAACL,EAAmCc,GACrD,IAAMC,EAAIf,EAAQD,OAAOU,OAASK,EAAe,EACjDd,EAAQgB,KAAO,kBACf,IAAMC,EAAYT,KAEZU,EAAiB,SAACN,EAAmBjF,EAAW/H,GACpDoM,EAAQY,UAAYA,EACpBZ,EAAQa,SAASlF,EAAGoF,EAAGE,EAAWA,GAElCjB,EAAQY,UAAY,QACpBZ,EAAQmB,SAASvN,EAAM+H,EAAI6E,GAAeO,EAAIE,IAGhDC,EAAe,UAAW,EAAG,UAC7BA,EAAe,UAAW,GAAI,YAC9BA,EAAe,UAAW,IAAK,kBAgC/BE,CAAWpB,EAzBU,IA8CnBqB,CAAKnB,EAAWF,EAASR,QACxB,CAACA,EAAQK,IAGV,qBAAK7G,IAAK0G,EAAV,SACE,wBAAQ1G,IAAKyG,OCnDb6B,GAAiB,SAACpF,GACtB,IAiBMqF,EAtCY,SAACrF,GACnB,IAAMsF,EAAa,GAgBnB,OAdAtF,EAAMR,SAAQ,SAAC+F,GAGb,IAFA,IAAIC,EAAaF,EAERtL,EAAI,EAAGA,EAAIuL,EAAE7J,OAAQ1B,GAAK,EAAG,CACpC,IAAMyL,EAAYF,EAAEvL,GAEdyL,KAAaD,IACjBA,EAAWC,GAAa,IAG1BD,EAAaA,EAAWC,OAIrBH,EAqBUI,CAAY1F,GAC7B,OACE,cAAC2F,GAAA,EAAD,UACE,cAACA,GAAA,EAAK3Q,KAAN,UACE,cAAC2Q,GAAA,EAAK7P,QAAN,UArBa,SAAb8P,EAAcN,GAAD,OACjBO,OAAOC,KAAKR,GAAMnL,KAAI,SAAC4L,GACrB,IAAMC,EAAWH,OAAOC,KAAKR,EAAKS,IAAIrK,OAAS,EAE/C,OACE,cAACiK,GAAA,EAAKA,KAAN,UACE,eAACA,GAAA,EAAK3Q,KAAN,WACE,cAAC2Q,GAAA,EAAKlI,KAAN,CAAWC,KAAMsI,EAAW,SAAW,SACvC,eAACL,GAAA,EAAK7P,QAAN,WACGkQ,EAAW,cAACL,GAAA,EAAK/P,OAAN,UAAcmQ,IAAmB,cAACJ,GAAA,EAAK/M,YAAN,UAAmBmN,IAC/DH,EAAWN,EAAKS,WALPA,MAgBDH,CAAWP,UAuFnBY,GAjFK,SAAC,GAAqD,IAAnD/F,EAAkD,EAAlDA,QAAkD,EACrC1L,mBAAmB,IADkB,mBAChE0R,EADgE,KACrDC,EADqD,OAEnC3R,mBAAiB,IAFkB,mBAEhE4R,EAFgE,KAEpDC,EAFoD,OAGzC7R,oBAAkB,GAHuB,mBAGhEqD,EAHgE,KAGvDyO,EAHuD,KAKvE1C,qBAAU,WACR0C,GAAW,GAEX,IAAMC,EAAO,uCAAG,wCAAA7M,EAAA,6DACR8M,EAAS,IAAIC,OAAJ,UAAcvG,EAAQtJ,GAAtB,4EAAoG,MADrG,SAES+C,MAAM,SAFf,cAERC,EAFQ,gBAGKA,EAASlC,OAHd,UAGRwC,EAHQ,QAIRwM,EAAQF,EAAOG,KAAKzM,KACXwM,EAAME,OALP,qDAOYF,EAAME,OAAxB5G,EAPM,EAONA,MAAOsD,EAPD,EAOCA,OACf6C,EAAanG,EAAM6G,MAAM,MAAM1M,KAAI,SAACoL,GAAD,OAAOA,EAAE9J,WAC5C4K,EACE/C,EACGuD,MAAM,MACN1M,KAAI,SAAC2M,GAAD,OAAOA,EAAErL,UACbvC,KAAK,KAGVoN,GAAW,GAhBG,4CAAH,qDAmBRC,IACL,IAAMQ,EAAiBC,aAAY,WAAWT,MAAWtS,KACzD,OAAO,kBAAMgT,cAAcF,MAC1B,CAAC7G,EAAQtJ,KAEZ,IAAMsQ,EAAQ,CACZ,CACEC,SAAU,CAAE7M,IAAK,UAAWzE,QAAS,WACrCuR,OAAQ,kBACN,cAACC,GAAA,EAAIC,KAAL,UACE,cAACtL,EAAA,EAAD,UACE,cAACuL,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,gCACE,sCADF,IACgBtH,EAAQxC,QAExB,gCACE,sCADF,IACgBwC,EAAQ7K,mBAQpC,CACE8R,SAAU,CAAE7M,IAAK,QAASzE,QAAS,SACnCuR,OAAQ,kBACN,cAACC,GAAA,EAAIC,KAAL,CAAUzP,QAASA,EAAnB,SACE,cAACmE,EAAA,EAAD,UACE,cAACuL,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,UAAapC,GAAec,EAAU/L,KAAI,SAACoL,GAAD,OAAOA,EAAEsB,MAAM,mBAMnE,CACEM,SAAU,CAAE7M,IAAK,SAAUzE,QAAS,UACpCuR,OAAQ,kBACN,cAACC,GAAA,EAAIC,KAAL,CAAUzP,QAASA,EAAnB,SACE,cAAC,GAAD,CAAUyL,OAAQ8C,SAM1B,OACE,mCACE,cAACiB,GAAA,EAAD,CAAKH,MAAOA,O,cC7FHO,OAlCf,WAA6B,IAAD,EACMjT,mBAAqB,IAD3B,mBACnB4N,EADmB,KACTsF,EADS,OAEgBlT,qBAFhB,mBAEnB6N,EAFmB,KAEJsF,EAFI,KAgB1B,OAZA/D,qBAAU,WACR,IAAMgE,EAAO,uCAAG,8BAAAlO,EAAA,sEACSC,MAAM,kBADf,cACRC,EADQ,gBAEiBA,EAASC,OAF1B,OAERgO,EAFQ,OAGdH,GAAY,SAAC7E,GAAD,OAAQX,IAAQW,EAAGgF,GAAmBhF,EAAIgF,KAHxC,2CAAH,qDAMRD,IACL,IAAMb,EAAiBC,aAAY,WAAWY,MAAW3T,KACzD,OAAO,kBAAMgT,cAAcF,MAC1B,IAGD,sBAAKhE,UAAU,MAAf,UACE,cAAC,EAAD,IACA,gCACE,cAAC,EAAD,CACEnI,kBAAmBwH,EAAS0F,QAAO,SAACC,EAAM1P,GAAP,OAAgB0P,EAAO1P,EAAKsJ,gBAAe,GAC9E9G,gBAAiBuH,EAAS0F,QAAO,SAACC,EAAM1P,GAAP,OAAgB0P,EAAO1P,EAAKuJ,cAAa,GAC1E9G,OAAQsH,EAASrI,QAAO,SAAC8I,GAAD,MAAoB,aAAbA,EAAEtC,UAAuB7E,OACxDX,SAAUqH,EAASrI,QAAO,SAAC8I,GAAD,MAAoB,aAAbA,EAAEtC,UAAuB7E,OAC1DV,MAAOoH,EAAS1G,SAElB,cAAC,GAAD,CAAa0G,SAAUA,EAAUE,mBAAoBqF,EAAkBtF,cAAeA,SACnEpI,IAAlBoI,GAA+B,cAAC,GAAD,CAAanC,QAASmC,WCnC9D2F,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8f45dc2b.chunk.js","sourcesContent":["const refreshRateSettingName = 'refreshRate';\nconst defaultRefreshRate = 5000;\n\nexport const saveRefreshRate = (refreshRate: number): void => {\n  const refreshRateInMs = refreshRate;\n  window.localStorage.setItem(refreshRateSettingName, refreshRateInMs.toString());\n};\n\nexport const getRefreshRate = (): number => {\n  const refreshRate = window.localStorage.getItem(refreshRateSettingName);\n  return Number(refreshRate ?? defaultRefreshRate);\n};\n","export default __webpack_public_path__ + \"static/media/logo.4754a3cb.png\";","import React, { useState } from 'react';\nimport { Menu, Image, Modal, Form, Label, Input, Button } from 'semantic-ui-react';\nimport { saveRefreshRate, getRefreshRate } from '../Services/settings';\nimport logo from '../static/logo.png';\n\nconst HeaderMenu = (): JSX.Element => {\n  const [refreshRateInSeconds, setRefreshRate] = useState<number>(() => getRefreshRate() / 1000);\n\n  const SaveSettings = (_event: unknown, _data: unknown) => {\n    const refreshRate = refreshRateInSeconds < 1 ? 1 : refreshRateInSeconds;\n    saveRefreshRate(refreshRate * 1000);\n    window.location.reload();\n  };\n\n  return (\n    <Menu borderless color=\"green\" style={{ border: 'none' }}>\n      <Menu.Item header as=\"a\" href=\"/web\">\n        <Image size=\"mini\" src={logo} />\n        Elementum\n      </Menu.Item>\n      <Modal trigger={<Menu.Item position=\"right\">Settings</Menu.Item>} closeIcon>\n        <Modal.Header content=\"Settings\" />\n        <Modal.Content>\n          <Form>\n            <Form.Group inline>\n              <Form.Field>\n                <label htmlFor=\"refresh-rate\">Refresh rate:</label>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  labelPosition=\"right\"\n                  value={refreshRateInSeconds}\n                  onChange={(_event, data) => setRefreshRate(Number(data.value))}\n                >\n                  <input id=\"refresh-rate\" />\n                  <Label>Seconds</Label>\n                </Input>\n              </Form.Field>\n            </Form.Group>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={SaveSettings} positive>\n            Save\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </Menu>\n  );\n};\n\nexport default HeaderMenu;\n","import React, { FC, useReducer, useRef, useState } from 'react';\nimport { Dropdown, DropdownItemProps, Grid, Icon, Item, ItemGroup, Search, SearchResultProps, Statistic } from 'semantic-ui-react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst debounceWaitTime = 300;\n\ntype TorrentType = 'Movies' | 'TvShows' | 'General';\nconst torrentTypes: DropdownItemProps[] = [\n  {\n    text: 'Movies',\n    value: 'Movies',\n    icon: 'film',\n  },\n  {\n    text: 'TV Shows',\n    value: 'TvShows',\n    icon: 'tv',\n  },\n  {\n    text: 'General',\n    value: 'General',\n    icon: 'magnet',\n  },\n];\n\ntype Action =\n  | { type: 'CleanQuery' }\n  | { type: 'StartSearch'; query: string }\n  | { type: 'FinishSearch'; results: ResultView[] }\n  | { type: 'UpdateSelection'; selection: string };\n\ntype MediaType = 'movie' | 'tvshow' | 'season' | 'episode';\ninterface Info {\n  plotoutline: string;\n  tagline: string;\n  code: string;\n  year: number;\n  rating: number;\n  genre: string[];\n  date: Date;\n  mediatype: MediaType;\n}\n\ninterface Art {\n  thumb: string;\n}\n\ninterface Result {\n  label: string;\n  info: Info;\n  art: Art;\n  path: string;\n  is_playable: boolean;\n}\n\ninterface ResultView {\n  title: string;\n  tagline: string;\n  description: string;\n  year: number;\n  rating: number;\n  genre: string[];\n  date: Date;\n  image: string;\n  path: string;\n  mediatype: MediaType;\n  key: string;\n}\n\ninterface State {\n  loading: boolean;\n  results: ResultView[];\n  value: string;\n}\n\nconst initialState: State = {\n  loading: false,\n  results: [],\n  value: '',\n};\n\nfunction queryReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'CleanQuery':\n      return initialState;\n    case 'StartSearch':\n      return { ...state, loading: true, value: action.query };\n    case 'FinishSearch':\n      return { ...state, loading: false, results: action.results };\n    case 'UpdateSelection':\n      return { ...state, value: action.selection };\n  }\n}\n\nconst resultRenderer = (item: SearchResultProps) => {\n  const result = item as ResultView;\n  return (\n    <ItemGroup>\n      <Item>\n        <Item.Image size=\"small\" src={result.image} />\n        <Item.Content>\n          <Item.Header>{result.title}</Item.Header>\n          <Item.Meta>{result.tagline}</Item.Meta>\n          <Item.Description>{result.description}</Item.Description>\n          {result.mediatype !== 'season' && (\n            <Item.Extra>{`${result.rating} - ${result.genre?.join(', ')} - ${result.date?.toString() ?? result.year ?? '-'}`}</Item.Extra>\n          )}\n        </Item.Content>\n      </Item>\n    </ItemGroup>\n  );\n};\n\nfunction getSearchType(torrentType: TorrentType): string {\n  switch (torrentType) {\n    case 'Movies':\n      return 'movies';\n    case 'TvShows':\n      return 'shows';\n    case 'General':\n      return '.';\n  }\n}\n\nasync function querySearchResults(url: string, dispatch: React.Dispatch<Action>) {\n  const response = await fetch(url);\n  const items = (await response.json()).items as Result[];\n\n  dispatch({\n    type: 'FinishSearch',\n    results: items\n      .filter((i) => i.info !== undefined)\n      .map((i) => ({\n        image: i.art.thumb,\n        key: `${i.info.code}-${i.label}`,\n        description: i.info.plotoutline,\n        title: i.label,\n        tagline: i.info.tagline,\n        year: i.info.year,\n        date: i.info.date,\n        genre: i.info.genre,\n        rating: i.info.rating,\n        mediatype: i.info.mediatype,\n        path: i.path,\n      })),\n  });\n}\n\ninterface IStatisticsProps {\n  /**\n   * Total download rate in kB/s\n   */\n  totalDownloadRate: number;\n\n  /**\n   * Total upload rate in kB/s\n   */\n  totalUploadRate: number;\n\n  /**\n   * Active torrents\n   */\n  active: number;\n\n  /**\n   * Finished torrents\n   */\n  finished: number;\n\n  /**\n   * Total torrents\n   */\n  total: number;\n}\n\nconst Statistics: FC<IStatisticsProps> = ({ totalDownloadRate, totalUploadRate, active, finished, total }: IStatisticsProps) => {\n  const [torrentType, setTorrentType] = useState<TorrentType>('Movies');\n  const searcRef = useRef<any>();\n  const [state, dispatch] = useReducer(queryReducer, initialState);\n  const { loading, results, value } = state;\n\n  const debounceSearchChange = useDebouncedCallback(async (query: string) => {\n    const searchType = getSearchType(torrentType);\n\n    await querySearchResults(`/${searchType}/search?q=${query}`, dispatch);\n  }, debounceWaitTime);\n\n  const handleQueryChange = async (query: string) => {\n    dispatch({\n      type: 'StartSearch',\n      query,\n    });\n\n    if (query.trim().length === 0) {\n      dispatch({\n        type: 'CleanQuery',\n      });\n      return;\n    }\n\n    await debounceSearchChange(query);\n  };\n\n  const handleResultSelect = async (data: ResultView): Promise<void> => {\n    const path = data.path.replace('plugin://plugin.video.elementum/', '');\n    const url = `/${path}?external=1`;\n\n    switch (torrentType) {\n      case 'Movies':\n        await fetch(url);\n        break;\n      case 'TvShows': {\n        dispatch({\n          type: 'StartSearch',\n          query: value,\n        });\n\n        if (path.includes('links')) {\n          await fetch(url);\n        } else {\n          await querySearchResults(url, dispatch);\n          searcRef.current.open();\n        }\n        break;\n      }\n      case 'General':\n        break;\n    }\n  };\n\n  const handleTorrentTypeChange = (torrentTypeValue: TorrentType) => {\n    setTorrentType(torrentTypeValue);\n    dispatch({\n      type: 'CleanQuery',\n    });\n  };\n\n  return (\n    <>\n      <Grid padded=\"horizontally\" stackable columns=\"3\">\n        <Grid.Row verticalAlign=\"middle\">\n          <Grid.Column floated=\"left\">\n            <Search\n              fluid\n              placeholder=\"Search\"\n              loading={loading}\n              results={results}\n              value={value}\n              onSearchChange={(_, data) => handleQueryChange(data.value ?? '')}\n              resultRenderer={resultRenderer}\n              onResultSelect={(_, data) => handleResultSelect(data.result)}\n              ref={searcRef}\n              minCharacters={3}\n              input={{\n                icon: 'search',\n                action: (\n                  <Dropdown\n                    fluid\n                    selection\n                    options={torrentTypes}\n                    defaultValue={torrentTypes[0].value}\n                    onChange={(_, data) => handleTorrentTypeChange(data.value as TorrentType)}\n                  />\n                ),\n              }}\n            />\n          </Grid.Column>\n          <Grid.Column width=\"3\">\n            <Statistic.Group widths=\"3\" size=\"tiny\">\n              <Statistic>\n                <Statistic.Value>{active}</Statistic.Value>\n                <Statistic.Label>Active</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{finished}</Statistic.Value>\n                <Statistic.Label>Finished</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{total}</Statistic.Value>\n                <Statistic.Label>Total</Statistic.Label>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n          <Grid.Column floated=\"right\">\n            <Statistic.Group widths=\"2\" size=\"tiny\">\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow down\" size=\"small\" />\n                  {` ${totalDownloadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>\n                  <Icon name=\"arrow up\" size=\"small\" />\n                  {` ${totalUploadRate.toFixed(1)} kB/s`}\n                </Statistic.Value>\n              </Statistic>\n            </Statistic.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default Statistics;\n","import React, { useState } from 'react';\nimport { Button, Checkbox, Message, Modal, Popup } from 'semantic-ui-react';\n\ninterface ITorrentListProps {\n  torrentIdsToDelete: string[];\n}\n\nconst DeleteTorrentModal = ({ torrentIdsToDelete }: ITorrentListProps): JSX.Element => {\n  const [open, setOpen] = useState(false);\n  const [deleteFiles, setDeleteFiles] = useState(false);\n  const hasSelectedTorrents = torrentIdsToDelete.length !== 0;\n\n  // TODO: handle response\n  // TODO: update list after executing fetch\n  function deleteSelectedTorrents() {\n    torrentIdsToDelete.map((id) => fetch(`/torrents/delete/${id}?files=${deleteFiles}`));\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      open={open}\n      trigger={\n        <Popup\n          trigger={\n            <div style={{ display: 'inline-block' }}>\n              <Button content=\"Delete\" disabled={!hasSelectedTorrents} onClick={(_, _data) => setOpen(true)} />\n            </div>\n          }\n          content=\"Select at least 1 torrent\"\n          disabled={hasSelectedTorrents}\n          closeOnTriggerClick={false}\n          inverted\n        />\n      }\n    >\n      <Modal.Header>Delete Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          Are you sure?\n          <br />\n          <Message negative>\n            <Checkbox label=\"Also delete files\" onChange={(e, data) => setDeleteFiles(data.checked ?? false)} />\n          </Message>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"No\" icon=\"undo\" onClick={() => setOpen(false)} />\n        <Button content=\"Yes\" icon=\"trash\" color=\"red\" onClick={() => deleteSelectedTorrents()} />\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default DeleteTorrentModal;\n","import React from 'react';\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react';\n\nfunction UploadTorrentModal(): JSX.Element {\n  const [open, setOpen] = React.useState(false);\n  const [uri, setUri] = React.useState('');\n  const [file, setFile] = React.useState<File>();\n\n  async function addTorrent(path: string, additionalData?: [name: string, value: string][]) {\n    const formData = new FormData();\n    formData.append('uri', uri);\n    formData.append('file', file ?? 'null');\n    additionalData?.forEach((x) => formData.append(x[0], x[1]));\n\n    await fetch(path, {\n      method: 'POST',\n      body: formData,\n    });\n    setOpen(false);\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={\n        <Button icon labelPosition=\"left\" floated=\"right\" primary>\n          <Icon name=\"download\" />\n          Add Torrent\n        </Button>\n      }\n    >\n      <Modal.Header>Add Torrent</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <Form>\n            <Form.Input placeholder=\"Magnet or Torrent file URL\" onChange={(e) => setUri(e.target.value)} />\n            <Form.Input type=\"file\" accept=\".torrent\" onChange={(e) => setFile(e.target.files?.item(0) ?? undefined)} />\n          </Form>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button content=\"Cancel\" color=\"red\" onClick={() => setOpen(false)} />\n        <Button\n          content=\"Add (all files)\"\n          labelPosition=\"left\"\n          icon=\"download\"\n          color=\"yellow\"\n          onClick={() => addTorrent('/torrents/add', [['all', '1']])}\n        />\n        <Button content=\"Add\" labelPosition=\"left\" icon=\"download\" color=\"blue\" onClick={() => addTorrent('/torrents/add')} />\n        <Button content=\"Stream\" labelPosition=\"left\" icon=\"play\" color=\"green\" onClick={() => addTorrent('/playuri')} />\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default UploadTorrentModal;\n","import React from 'react';\nimport isEqual from 'react-fast-compare';\nimport {\n  Button,\n  ButtonProps,\n  Checkbox,\n  CheckboxProps,\n  Icon,\n  Label,\n  Popup,\n  Progress,\n  Statistic,\n  StatisticGroup,\n  StatisticValue,\n  Table,\n} from 'semantic-ui-react';\nimport { ITorrent } from '../../dataStructure';\n\ninterface ITorrentListItemProps {\n  torrent: ITorrent;\n  isClicked: boolean;\n  isChecked: boolean;\n  onSelect: (_torrentId: string, _isChecked: boolean) => void;\n  onClick: (torrent: ITorrent | undefined) => void;\n}\n\nconst TorrentListItem = ({ torrent, isClicked, isChecked, onSelect, onClick }: ITorrentListItemProps): JSX.Element => {\n  const isActive = torrent.status !== 'Finished' && torrent.status !== 'Paused';\n  const statusLabelColor = isActive ? 'green' : 'grey';\n\n  const onResumePause = async (event: React.FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n    event.stopPropagation();\n    const { checked } = data;\n    const action = checked ? 'resume' : 'pause';\n\n    await fetch(`/torrents/${action}/${torrent.id}`);\n  };\n\n  const onCheckboxClick = (event: React.FormEvent<HTMLInputElement>, data: CheckboxProps) => {\n    event.stopPropagation();\n    onSelect(torrent.id, data.checked ?? false);\n  };\n\n  const onPlay = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, _data: ButtonProps) => {\n    event.stopPropagation();\n    await fetch(`/playuri?resume=${torrent.id}`);\n  };\n\n  return (\n    <>\n      <Table.Row onClick={() => onClick(isClicked ? undefined : torrent)} active={isClicked}>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Checkbox toggle onChange={onResumePause} checked={isActive} />\n        </Table.Cell>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Checkbox checked={isChecked} onChange={onCheckboxClick} />\n        </Table.Cell>\n        <Table.Cell collapsing>\n          <Button color=\"green\" icon=\"play\" floated=\"right\" onClick={onPlay} />\n        </Table.Cell>\n        <Table.Cell>{torrent.name}</Table.Cell>\n        <Table.Cell>\n          <Popup content={`${torrent.progress.toFixed(2)}%`} trigger={<Progress percent={torrent.progress} autoSuccess size=\"small\" />} />\n        </Table.Cell>\n        <Table.Cell collapsing textAlign=\"center\">\n          <Label color={statusLabelColor}>{torrent.status}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup size=\"mini\" widths=\"2\">\n            <Statistic value={torrent.ratio.toFixed(2)} label=\"Seed ratio\" />\n            <Popup\n              content={`Seed time: ${torrent.seeding_time}`}\n              trigger={<Statistic value={`${torrent.time_ratio.toFixed(2)}`} label=\"Time ratio\" />}\n            />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell textAlign=\"center\">\n          <Label>{torrent.size}</Label>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"2\" size=\"mini\">\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow down\" size=\"small\" />\n                {` ${torrent.download_rate.toFixed(2)} kB/s`}\n              </StatisticValue>\n            </Statistic>\n            <Statistic>\n              <StatisticValue>\n                <Icon name=\"arrow up\" size=\"small\" />\n                {` ${torrent.upload_rate.toFixed(2)} kB/s`}\n              </StatisticValue>\n            </Statistic>\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"1\" size=\"mini\">\n            <Statistic value={`${torrent.seeders} / ${torrent.seeders_total}`} label=\"Active / Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n        <Table.Cell>\n          <StatisticGroup widths=\"1\" size=\"mini\">\n            <Statistic value={`${torrent.peers} / ${torrent.peers_total}`} label=\"Active / Total\" />\n          </StatisticGroup>\n        </Table.Cell>\n      </Table.Row>\n    </>\n  );\n};\n\nexport default React.memo(TorrentListItem, isEqual);\n","import React, { FC, useCallback, useState } from 'react';\nimport { Checkbox, Table } from 'semantic-ui-react';\nimport DeleteTorrentModal from '../delete-modal';\nimport UploadTorrentModal from '../upload-modal';\nimport TorrentListItem from './torrent';\nimport { ITorrent } from '../dataStructure';\n\ninterface ITorrentListProps {\n  torrents: ITorrent[];\n  activeTorrent: ITorrent | undefined;\n  onSetActiveTorrent: (_torrentId: ITorrent | undefined) => void;\n}\n\nconst TorrentList: FC<ITorrentListProps> = ({ torrents, activeTorrent, onSetActiveTorrent }: ITorrentListProps) => {\n  const [selectedTorrents, setSelectedTorrents] = useState<string[]>([]);\n\n  const onTorrentSelected = useCallback((torrentId: string, isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedTorrents((st) => [...st, torrentId]);\n    } else {\n      setSelectedTorrents((st) => st.filter((t) => t !== torrentId));\n    }\n  }, []);\n\n  const onAllTorrentsSelected = (isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedTorrents(torrents.map((t) => t.id));\n    } else {\n      setSelectedTorrents([]);\n    }\n  };\n\n  return (\n    <>\n      <Table compact=\"very\" size=\"small\" stackable>\n        <Table.Header className=\"mobile-hidden\">\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell>\n              <Checkbox\n                onChange={(_, data) => onAllTorrentsSelected(data.checked ?? false)}\n                checked={selectedTorrents.length >= torrents.length}\n              />\n            </Table.HeaderCell>\n            <Table.HeaderCell />\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Progress</Table.HeaderCell>\n            <Table.HeaderCell>Status</Table.HeaderCell>\n            <Table.HeaderCell>Ratios</Table.HeaderCell>\n            <Table.HeaderCell>Size</Table.HeaderCell>\n            <Table.HeaderCell>Rates</Table.HeaderCell>\n            <Table.HeaderCell>Seeds</Table.HeaderCell>\n            <Table.HeaderCell>Peers</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {torrents.map((t) => (\n            <TorrentListItem\n              key={t.id}\n              torrent={t}\n              onSelect={onTorrentSelected}\n              onClick={onSetActiveTorrent}\n              isClicked={activeTorrent?.id === t.id}\n              isChecked={selectedTorrents.includes(t.id)}\n            />\n          ))}\n        </Table.Body>\n        <Table.Footer fullWidth>\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell colSpan={10}>\n              <UploadTorrentModal />\n              <DeleteTorrentModal torrentIdsToDelete={selectedTorrents} />\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n    </>\n  );\n};\n\nexport default TorrentList;\n","import React, { useEffect, useRef } from 'react';\nimport { useDebounce } from 'use-debounce/lib';\nimport useResizeObserver from 'use-resize-observer';\n\ninterface IPieceMapProps {\n  pieces: string;\n}\n\nconst PieceSize = 8;\nconst Margin = 1;\nconst FullSize = PieceSize + Margin;\n\nconst drawLegend = (context: CanvasRenderingContext2D, legendHeight: number) => {\n  const y = context.canvas.height - legendHeight / 2;\n  context.font = '15px sans-serif';\n  const pieceSize = PieceSize * 1.3;\n\n  const drawLegendItem = (fillStyle: string, x: number, text: string) => {\n    context.fillStyle = fillStyle;\n    context.fillRect(x, y, pieceSize, pieceSize);\n\n    context.fillStyle = 'black';\n    context.fillText(text, x + PieceSize * 2, y + pieceSize);\n  };\n\n  drawLegendItem('#4CAF50', 0, '- Done');\n  drawLegendItem('#ECEFF1', 70, '- Queued');\n  drawLegendItem('#F0B8B8', 170, '- Not selected');\n};\n\nconst draw = (parentDiv: HTMLDivElement, context: CanvasRenderingContext2D, pieces: string) => {\n  const parentWidth = parentDiv.clientWidth;\n  const piecesPerLine = Math.floor(parentWidth / FullSize);\n  const height = Math.ceil(pieces.length / piecesPerLine) * FullSize;\n  const legendHeight = 30;\n\n  const { canvas } = context;\n  canvas.width = parentWidth;\n  canvas.height = height + legendHeight;\n\n  for (let i = 0; i < pieces.length; i += 1) {\n    let pieceColor;\n\n    switch (pieces[i]) {\n      case '+':\n        pieceColor = '#4CAF50';\n        break;\n      case '-':\n        pieceColor = '#F0B8B8';\n        break;\n      default:\n        pieceColor = '#ECEFF1';\n        break;\n    }\n\n    context.fillStyle = pieceColor;\n    context.fillRect(FullSize * (i % piecesPerLine), Math.floor(i / piecesPerLine) * FullSize, PieceSize, PieceSize);\n  }\n\n  drawLegend(context, legendHeight);\n};\n\nconst PieceMap = ({ pieces }: IPieceMapProps): JSX.Element => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const parentDivRef = useRef<HTMLDivElement>(null);\n  const { width } = useResizeObserver<HTMLDivElement>({ ref: parentDivRef });\n  const [debouncedWidth] = useDebounce(width, 100);\n\n  useEffect(() => {\n    if (!debouncedWidth) return;\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const parentDiv = parentDivRef.current;\n    if (!parentDiv) return;\n\n    draw(parentDiv, context, pieces);\n  }, [pieces, debouncedWidth]);\n\n  return (\n    <div ref={parentDivRef}>\n      <canvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default PieceMap;\n","import React, { useEffect, useState } from 'react';\nimport { Grid, GridColumn, GridRow, List, Tab } from 'semantic-ui-react';\nimport { ITorrent } from '../dataStructure';\nimport { getRefreshRate } from '../Services/settings';\nimport PieceMap from './piece-map';\n\ninterface ITorrentInfoItemProps {\n  torrent: ITorrent;\n}\n\ninterface Tree {\n  [key: string]: Tree;\n}\n\nconst getFileTree = (files: string[][]): Tree => {\n  const tree: Tree = {};\n\n  files.forEach((f) => {\n    let parentNode = tree;\n\n    for (let i = 0; i < f.length; i += 1) {\n      const pathChunk = f[i];\n\n      if (!(pathChunk in parentNode)) {\n        parentNode[pathChunk] = {};\n      }\n\n      parentNode = parentNode[pathChunk];\n    }\n  });\n\n  return tree;\n};\n\nconst renderFileTree = (files: string[][]): JSX.Element => {\n  const renderTree = (tree: Tree): JSX.Element[] =>\n    Object.keys(tree).map((k) => {\n      const isFolder = Object.keys(tree[k]).length > 0;\n\n      return (\n        <List.List key={k}>\n          <List.Item>\n            <List.Icon name={isFolder ? 'folder' : 'file'} />\n            <List.Content>\n              {isFolder ? <List.Header>{k}</List.Header> : <List.Description>{k}</List.Description>}\n              {renderTree(tree[k])}\n            </List.Content>\n          </List.Item>\n        </List.List>\n      );\n    });\n\n  const fileTree = getFileTree(files);\n  return (\n    <List>\n      <List.Item>\n        <List.Content>{renderTree(fileTree)}</List.Content>\n      </List.Item>\n    </List>\n  );\n};\n\nconst TorrentInfo = ({ torrent }: ITorrentInfoItemProps): JSX.Element => {\n  const [filesList, setFilesList] = useState<string[]>([]);\n  const [piecesList, setPiecesList] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const getInfo = async () => {\n      const regexp = new RegExp(`${torrent.id}.+?Files.+?:\\\\s+(?<files>.+?)\\\\n\\\\n.+?Pieces:\\\\s+(?<pieces>.+?)\\\\n\\\\n\\\\n`, 'gs');\n      const response = await fetch('/info');\n      const info = await response.text();\n      const match = regexp.exec(info);\n      if (!match || !match.groups) return;\n\n      const { files, pieces } = match.groups;\n      setFilesList(files.split('\\n').map((f) => f.trim()));\n      setPiecesList(\n        pieces\n          .split('\\n')\n          .map((p) => p.trim())\n          .join(''),\n      );\n\n      setLoading(false);\n    };\n\n    void getInfo();\n    const intervalHandle = setInterval(() => void getInfo(), getRefreshRate());\n    return () => clearInterval(intervalHandle);\n  }, [torrent.id]);\n\n  const panes = [\n    {\n      menuItem: { key: 'general', content: 'General' },\n      render: () => (\n        <Tab.Pane>\n          <Grid>\n            <GridRow>\n              <GridColumn>\n                <div>\n                  <b>Name:</b> {torrent.name}\n                </div>\n                <div>\n                  <b>Size:</b> {torrent.size}\n                </div>\n              </GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: 'files', content: 'Files' },\n      render: () => (\n        <Tab.Pane loading={loading}>\n          <Grid>\n            <GridRow>\n              <GridColumn>{renderFileTree(filesList.map((f) => f.split('/')))}</GridColumn>\n            </GridRow>\n          </Grid>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: 'pieces', content: 'Pieces' },\n      render: () => (\n        <Tab.Pane loading={loading}>\n          <PieceMap pieces={piecesList} />\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Tab panes={panes} />\n    </>\n  );\n};\n\nexport default TorrentInfo;\n","import React, { useEffect, useState } from 'react';\nimport isEqual from 'react-fast-compare';\nimport HeaderMenu from './menu';\nimport SearchBar from './search-bar';\nimport TorrentList from './torrents-list';\nimport TorrentInfo from './torrent-info';\nimport { ITorrent } from './dataStructure';\nimport 'semantic-ui-css/semantic.min.css';\nimport './style.css';\nimport { getRefreshRate } from './Services/settings';\n\nfunction App(): JSX.Element {\n  const [torrents, setTorrents] = useState<ITorrent[]>([]);\n  const [activeTorrent, setActiveTorrent] = useState<ITorrent>();\n\n  useEffect(() => {\n    const getList = async () => {\n      const response = await fetch('/torrents/list');\n      const fetchedTorrents = (await response.json()) as ITorrent[];\n      setTorrents((t) => (isEqual(t, fetchedTorrents) ? t : fetchedTorrents));\n    };\n\n    void getList();\n    const intervalHandle = setInterval(() => void getList(), getRefreshRate());\n    return () => clearInterval(intervalHandle);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <HeaderMenu />\n      <div>\n        <SearchBar\n          totalDownloadRate={torrents.reduce((rate, item) => rate + item.download_rate, 0)}\n          totalUploadRate={torrents.reduce((rate, item) => rate + item.upload_rate, 0)}\n          active={torrents.filter((t) => t.status !== 'Finished').length}\n          finished={torrents.filter((t) => t.status === 'Finished').length}\n          total={torrents.length}\n        />\n        <TorrentList torrents={torrents} onSetActiveTorrent={setActiveTorrent} activeTorrent={activeTorrent} />\n        {activeTorrent !== undefined && <TorrentInfo torrent={activeTorrent} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}